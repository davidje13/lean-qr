import { drawFrame } from './draw.mjs';
import Bitmap2D from '../structures/Bitmap2D.mjs';

function read(code) {
  // ? = off, not masked (data)
  // SP= off, masked (pattern)
  // % = on, not masked (data)
  // # = on, masked (pattern)
  const r = [];
  for (let y = 0; y < code.size; ++y) {
    let ln = '';
    for (let x = 0; x < code.size; ++x) {
      const v = code.get(x, y);
      const m = code.masked(x, y);
      ln += '? %#'[Boolean(v) * 2 + Boolean(m)];
    }
    r.push(ln);
  }
  return r;
}

function draw(version) {
  const code = new Bitmap2D({ size: version * 4 + 17 });
  drawFrame(code, version);
  return read(code);
}

describe('drawFrame', () => {
  it('writes the finder, timing, and reserved spaces for the chosen version', () => {
    expect(draw(1)).toEqual([
      '#######  ???? #######',
      '#     #  ???? #     #',
      '# ### #  ???? # ### #',
      '# ### #  ???? # ### #',
      '# ### #  ???? # ### #',
      '#     #  ???? #     #',
      '####### # # # #######',
      '         ????        ',
      '      #  ????        ',
      '?????? ??????????????',
      '??????#??????????????',
      '?????? ??????????????',
      '??????#??????????????',
      '        #????????????',
      '#######  ????????????',
      '#     #  ????????????',
      '# ### #  ????????????',
      '# ### #  ????????????',
      '# ### #  ????????????',
      '#     #  ????????????',
      '#######  ????????????',
    ]);
  });

  it('writes the alignment patterns for the chosen version', () => {
    expect(draw(2)).toEqual([
      '#######  ???????? #######',
      '#     #  ???????? #     #',
      '# ### #  ???????? # ### #',
      '# ### #  ???????? # ### #',
      '# ### #  ???????? # ### #',
      '#     #  ???????? #     #',
      '####### # # # # # #######',
      '         ????????        ',
      '      #  ????????        ',
      '?????? ??????????????????',
      '??????#??????????????????',
      '?????? ??????????????????',
      '??????#??????????????????',
      '?????? ??????????????????',
      '??????#??????????????????',
      '?????? ??????????????????',
      '??????#?????????#####????',
      '        #???????#   #????',
      '#######  ???????# # #????',
      '#     #  ???????#   #????',
      '# ### #  ???????#####????',
      '# ### #  ????????????????',
      '# ### #  ????????????????',
      '#     #  ????????????????',
      '#######  ????????????????',
    ]);
  });

  it('writes the version identifier for large versions', () => {
    expect(draw(7)).toEqual([
      '#######  ?????????????????????????  # #######',
      '#     #  ????????????????????????? #  #     #',
      '# ### #  ????????????????????????? #  # ### #',
      '# ### #  ????????????????????????? ## # ### #',
      '# ### #  ???????????#####?????????### # ### #',
      '#     #  ???????????#   #?????????    #     #',
      '####### # # # # # # # # # # # # # # # #######',
      '         ???????????#   #????????????        ',
      '      #  ???????????#####????????????        ',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '????#####???????????#####???????????#####????',
      '????#   #???????????#   #???????????#   #????',
      '????# # #???????????# # #???????????# # #????',
      '????#   #???????????#   #???????????#   #????',
      '????#####???????????#####???????????#####????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '??????#??????????????????????????????????????',
      '?????? ??????????????????????????????????????',
      '    # #??????????????????????????????????????',
      ' ####  ??????????????????????????????????????',
      '#  ## #?????????????#####???????????#####????',
      '        #???????????#   #???????????#   #????',
      '#######  ???????????# # #???????????# # #????',
      '#     #  ???????????#   #???????????#   #????',
      '# ### #  ???????????#####???????????#####????',
      '# ### #  ????????????????????????????????????',
      '# ### #  ????????????????????????????????????',
      '#     #  ????????????????????????????????????',
      '#######  ????????????????????????????????????',
    ]);
  });

  it('positions alignment patterns for all versions', () => {
    function findMarkers(img) {
      const r = [];
      const ln = img[5].slice(9, -11);
      for (let p = 0; (p = ln.indexOf('#   #', p)) !== -1; p += 5) {
        r.push(p + 11);
      }
      return r;
    }

    expect(findMarkers(draw(1))).toEqual([]);
    expect(findMarkers(draw(2))).toEqual([]);
    expect(findMarkers(draw(3))).toEqual([]);
    expect(findMarkers(draw(4))).toEqual([]);
    expect(findMarkers(draw(5))).toEqual([]);
    expect(findMarkers(draw(6))).toEqual([]);
    expect(findMarkers(draw(7))).toEqual([22]);
    expect(findMarkers(draw(8))).toEqual([24]);
    expect(findMarkers(draw(9))).toEqual([26]);
    expect(findMarkers(draw(10))).toEqual([28]);
    expect(findMarkers(draw(11))).toEqual([30]);
    expect(findMarkers(draw(12))).toEqual([32]);
    expect(findMarkers(draw(13))).toEqual([34]);
    expect(findMarkers(draw(14))).toEqual([26, 46]);
    expect(findMarkers(draw(15))).toEqual([26, 48]);
    expect(findMarkers(draw(16))).toEqual([26, 50]);
    expect(findMarkers(draw(17))).toEqual([30, 54]);
    expect(findMarkers(draw(18))).toEqual([30, 56]);
    expect(findMarkers(draw(19))).toEqual([30, 58]);
    expect(findMarkers(draw(20))).toEqual([34, 62]);
    expect(findMarkers(draw(21))).toEqual([28, 50, 72]);
    expect(findMarkers(draw(22))).toEqual([26, 50, 74]);
    expect(findMarkers(draw(23))).toEqual([30, 54, 78]);
    expect(findMarkers(draw(24))).toEqual([28, 54, 80]);
    expect(findMarkers(draw(25))).toEqual([32, 58, 84]);
    expect(findMarkers(draw(26))).toEqual([30, 58, 86]);
    expect(findMarkers(draw(27))).toEqual([34, 62, 90]);
    expect(findMarkers(draw(28))).toEqual([26, 50, 74, 98]);
    expect(findMarkers(draw(29))).toEqual([30, 54, 78, 102]);
    expect(findMarkers(draw(30))).toEqual([26, 52, 78, 104]);
    expect(findMarkers(draw(31))).toEqual([30, 56, 82, 108]);
    expect(findMarkers(draw(32))).toEqual([34, 60, 86, 112]);
    expect(findMarkers(draw(33))).toEqual([30, 58, 86, 114]);
    expect(findMarkers(draw(34))).toEqual([34, 62, 90, 118]);
    expect(findMarkers(draw(35))).toEqual([30, 54, 78, 102, 126]);
    expect(findMarkers(draw(36))).toEqual([24, 50, 76, 102, 128]);
    expect(findMarkers(draw(37))).toEqual([28, 54, 80, 106, 132]);
    expect(findMarkers(draw(38))).toEqual([32, 58, 84, 110, 136]);
    expect(findMarkers(draw(39))).toEqual([26, 54, 82, 110, 138]);
    expect(findMarkers(draw(40))).toEqual([30, 58, 86, 114, 142]);
  });
});
