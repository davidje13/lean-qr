// TODO: identify algorithm for these values
// Thanks, https://www.thonky.com/qr-code-tutorial/error-correction-table

// this bit packing is compiled down to single ints, saving a lot of space
// format: [group 2 count] | [group 1 count] | [group 1 size] | [ecsize]

/* prettier-ignore */
const DATA_L = [
               ( 1 << 12) | ( 19 << 5) |  7,
               ( 1 << 12) | ( 34 << 5) | 10,
               ( 1 << 12) | ( 55 << 5) | 15,
               ( 1 << 12) | ( 80 << 5) | 20,
               ( 1 << 12) | (108 << 5) | 26,
               ( 2 << 12) | ( 68 << 5) | 18,
               ( 2 << 12) | ( 78 << 5) | 20,
               ( 2 << 12) | ( 97 << 5) | 24,
               ( 2 << 12) | (116 << 5) | 30,
  ( 2 << 18) | ( 2 << 12) | ( 68 << 5) | 18,
               ( 4 << 12) | ( 81 << 5) | 20,
  ( 2 << 18) | ( 2 << 12) | ( 92 << 5) | 24,
               ( 4 << 12) | (107 << 5) | 26,
  ( 1 << 18) | ( 3 << 12) | (115 << 5) | 30,
  ( 1 << 18) | ( 5 << 12) | ( 87 << 5) | 22,
  ( 1 << 18) | ( 5 << 12) | ( 98 << 5) | 24,
  ( 5 << 18) | ( 1 << 12) | (107 << 5) | 28,
  ( 1 << 18) | ( 5 << 12) | (120 << 5) | 30,
  ( 4 << 18) | ( 3 << 12) | (113 << 5) | 28,
  ( 5 << 18) | ( 3 << 12) | (107 << 5) | 28,
  ( 4 << 18) | ( 4 << 12) | (116 << 5) | 28,
  ( 7 << 18) | ( 2 << 12) | (111 << 5) | 28,
  ( 5 << 18) | ( 4 << 12) | (121 << 5) | 30,
  ( 4 << 18) | ( 6 << 12) | (117 << 5) | 30,
  ( 4 << 18) | ( 8 << 12) | (106 << 5) | 26,
  ( 2 << 18) | (10 << 12) | (114 << 5) | 28,
  ( 4 << 18) | ( 8 << 12) | (122 << 5) | 30,
  (10 << 18) | ( 3 << 12) | (117 << 5) | 30,
  ( 7 << 18) | ( 7 << 12) | (116 << 5) | 30,
  (10 << 18) | ( 5 << 12) | (115 << 5) | 30,
  ( 3 << 18) | (13 << 12) | (115 << 5) | 30,
               (17 << 12) | (115 << 5) | 30,
  ( 1 << 18) | (17 << 12) | (115 << 5) | 30,
  ( 6 << 18) | (13 << 12) | (115 << 5) | 30,
  ( 7 << 18) | (12 << 12) | (121 << 5) | 30,
  (14 << 18) | ( 6 << 12) | (121 << 5) | 30,
  ( 4 << 18) | (17 << 12) | (122 << 5) | 30,
  (18 << 18) | ( 4 << 12) | (122 << 5) | 30,
  ( 4 << 18) | (20 << 12) | (117 << 5) | 30,
  ( 6 << 18) | (19 << 12) | (118 << 5) | 30,
];

/* prettier-ignore */
const DATA_M = [
               ( 1 << 12) | ( 16 << 5) | 10,
               ( 1 << 12) | ( 28 << 5) | 16,
               ( 1 << 12) | ( 44 << 5) | 26,
               ( 2 << 12) | ( 32 << 5) | 18,
               ( 2 << 12) | ( 43 << 5) | 24,
               ( 4 << 12) | ( 27 << 5) | 16,
               ( 4 << 12) | ( 31 << 5) | 18,
  ( 2 << 18) | ( 2 << 12) | ( 38 << 5) | 22,
  ( 2 << 18) | ( 3 << 12) | ( 36 << 5) | 22,
  ( 1 << 18) | ( 4 << 12) | ( 43 << 5) | 26,
  ( 4 << 18) | ( 1 << 12) | ( 50 << 5) | 30,
  ( 2 << 18) | ( 6 << 12) | ( 36 << 5) | 22,
  ( 1 << 18) | ( 8 << 12) | ( 37 << 5) | 22,
  ( 5 << 18) | ( 4 << 12) | ( 40 << 5) | 24,
  ( 5 << 18) | ( 5 << 12) | ( 41 << 5) | 24,
  ( 3 << 18) | ( 7 << 12) | ( 45 << 5) | 28,
  ( 1 << 18) | (10 << 12) | ( 46 << 5) | 28,
  ( 4 << 18) | ( 9 << 12) | ( 43 << 5) | 26,
  (11 << 18) | ( 3 << 12) | ( 44 << 5) | 26,
  (13 << 18) | ( 3 << 12) | ( 41 << 5) | 26,
               (17 << 12) | ( 42 << 5) | 26,
               (17 << 12) | ( 46 << 5) | 28,
  (14 << 18) | ( 4 << 12) | ( 47 << 5) | 28,
  (14 << 18) | ( 6 << 12) | ( 45 << 5) | 28,
  (13 << 18) | ( 8 << 12) | ( 47 << 5) | 28,
  ( 4 << 18) | (19 << 12) | ( 46 << 5) | 28,
  ( 3 << 18) | (22 << 12) | ( 45 << 5) | 28,
  (23 << 18) | ( 3 << 12) | ( 45 << 5) | 28,
  ( 7 << 18) | (21 << 12) | ( 45 << 5) | 28,
  (10 << 18) | (19 << 12) | ( 47 << 5) | 28,
  (29 << 18) | ( 2 << 12) | ( 46 << 5) | 28,
  (23 << 18) | (10 << 12) | ( 46 << 5) | 28,
  (21 << 18) | (14 << 12) | ( 46 << 5) | 28,
  (23 << 18) | (14 << 12) | ( 46 << 5) | 28,
  (26 << 18) | (12 << 12) | ( 47 << 5) | 28,
  (34 << 18) | ( 6 << 12) | ( 47 << 5) | 28,
  (14 << 18) | (29 << 12) | ( 46 << 5) | 28,
  (32 << 18) | (13 << 12) | ( 46 << 5) | 28,
  ( 7 << 18) | (40 << 12) | ( 47 << 5) | 28,
  (31 << 18) | (18 << 12) | ( 47 << 5) | 28,
];

/* prettier-ignore */
const DATA_Q = [
               ( 1 << 12) | ( 13 << 5) | 13,
               ( 1 << 12) | ( 22 << 5) | 22,
               ( 2 << 12) | ( 17 << 5) | 18,
               ( 2 << 12) | ( 24 << 5) | 26,
  ( 2 << 18) | ( 2 << 12) | ( 15 << 5) | 18,
               ( 4 << 12) | ( 19 << 5) | 24,
  ( 4 << 18) | ( 2 << 12) | ( 14 << 5) | 18,
  ( 2 << 18) | ( 4 << 12) | ( 18 << 5) | 22,
  ( 4 << 18) | ( 4 << 12) | ( 16 << 5) | 20,
  ( 2 << 18) | ( 6 << 12) | ( 19 << 5) | 24,
  ( 4 << 18) | ( 4 << 12) | ( 22 << 5) | 28,
  ( 6 << 18) | ( 4 << 12) | ( 20 << 5) | 26,
  ( 4 << 18) | ( 8 << 12) | ( 20 << 5) | 24,
  ( 5 << 18) | (11 << 12) | ( 16 << 5) | 20,
  ( 7 << 18) | ( 5 << 12) | ( 24 << 5) | 30,
  ( 2 << 18) | (15 << 12) | ( 19 << 5) | 24,
  (15 << 18) | ( 1 << 12) | ( 22 << 5) | 28,
  ( 1 << 18) | (17 << 12) | ( 22 << 5) | 28,
  ( 4 << 18) | (17 << 12) | ( 21 << 5) | 26,
  ( 5 << 18) | (15 << 12) | ( 24 << 5) | 30,
  ( 6 << 18) | (17 << 12) | ( 22 << 5) | 28,
  (16 << 18) | ( 7 << 12) | ( 24 << 5) | 30,
  (14 << 18) | (11 << 12) | ( 24 << 5) | 30,
  (16 << 18) | (11 << 12) | ( 24 << 5) | 30,
  (22 << 18) | ( 7 << 12) | ( 24 << 5) | 30,
  ( 6 << 18) | (28 << 12) | ( 22 << 5) | 28,
  (26 << 18) | ( 8 << 12) | ( 23 << 5) | 30,
  (31 << 18) | ( 4 << 12) | ( 24 << 5) | 30,
  (37 << 18) | ( 1 << 12) | ( 23 << 5) | 30,
  (25 << 18) | (15 << 12) | ( 24 << 5) | 30,
  ( 1 << 18) | (42 << 12) | ( 24 << 5) | 30,
  (35 << 18) | (10 << 12) | ( 24 << 5) | 30,
  (19 << 18) | (29 << 12) | ( 24 << 5) | 30,
  ( 7 << 18) | (44 << 12) | ( 24 << 5) | 30,
  (14 << 18) | (39 << 12) | ( 24 << 5) | 30,
  (10 << 18) | (46 << 12) | ( 24 << 5) | 30,
  (10 << 18) | (49 << 12) | ( 24 << 5) | 30,
  (14 << 18) | (48 << 12) | ( 24 << 5) | 30,
  (22 << 18) | (43 << 12) | ( 24 << 5) | 30,
  (34 << 18) | (34 << 12) | ( 24 << 5) | 30,
];

/* prettier-ignore */
const DATA_H = [
               ( 1 << 12) | (  9 << 5) | 17,
               ( 1 << 12) | ( 16 << 5) | 28,
               ( 2 << 12) | ( 13 << 5) | 22,
               ( 4 << 12) | (  9 << 5) | 16,
  ( 2 << 18) | ( 2 << 12) | ( 11 << 5) | 22,
               ( 4 << 12) | ( 15 << 5) | 28,
  ( 1 << 18) | ( 4 << 12) | ( 13 << 5) | 26,
  ( 2 << 18) | ( 4 << 12) | ( 14 << 5) | 26,
  ( 4 << 18) | ( 4 << 12) | ( 12 << 5) | 24,
  ( 2 << 18) | ( 6 << 12) | ( 15 << 5) | 28,
  ( 8 << 18) | ( 3 << 12) | ( 12 << 5) | 24,
  ( 4 << 18) | ( 7 << 12) | ( 14 << 5) | 28,
  ( 4 << 18) | (12 << 12) | ( 11 << 5) | 22,
  ( 5 << 18) | (11 << 12) | ( 12 << 5) | 24,
  ( 7 << 18) | (11 << 12) | ( 12 << 5) | 24,
  (13 << 18) | ( 3 << 12) | ( 15 << 5) | 30,
  (17 << 18) | ( 2 << 12) | ( 14 << 5) | 28,
  (19 << 18) | ( 2 << 12) | ( 14 << 5) | 28,
  (16 << 18) | ( 9 << 12) | ( 13 << 5) | 26,
  (10 << 18) | (15 << 12) | ( 15 << 5) | 28,
  ( 6 << 18) | (19 << 12) | ( 16 << 5) | 30,
               (34 << 12) | ( 13 << 5) | 24,
  (14 << 18) | (16 << 12) | ( 15 << 5) | 30,
  ( 2 << 18) | (30 << 12) | ( 16 << 5) | 30,
  (13 << 18) | (22 << 12) | ( 15 << 5) | 30,
  ( 4 << 18) | (33 << 12) | ( 16 << 5) | 30,
  (28 << 18) | (12 << 12) | ( 15 << 5) | 30,
  (31 << 18) | (11 << 12) | ( 15 << 5) | 30,
  (26 << 18) | (19 << 12) | ( 15 << 5) | 30,
  (25 << 18) | (23 << 12) | ( 15 << 5) | 30,
  (28 << 18) | (23 << 12) | ( 15 << 5) | 30,
  (35 << 18) | (19 << 12) | ( 15 << 5) | 30,
  (46 << 18) | (11 << 12) | ( 15 << 5) | 30,
  ( 1 << 18) | (59 << 12) | ( 16 << 5) | 30,
  (41 << 18) | (22 << 12) | ( 15 << 5) | 30,
  (64 << 18) | ( 2 << 12) | ( 15 << 5) | 30,
  (46 << 18) | (24 << 12) | ( 15 << 5) | 30,
  (32 << 18) | (42 << 12) | ( 15 << 5) | 30,
  (67 << 18) | (10 << 12) | ( 15 << 5) | 30,
  (61 << 18) | (20 << 12) | ( 15 << 5) | 30,
];

const calculate = (v) => {
  const g2n = v >> 18;
  const g1n = (v >> 12) & 0b111111;
  const g1s = (v >> 5) & 0b1111111;
  return {
    capBits: (g1n * g1s + g2n * (g1s + 1)) * 8,
    groups: g2n
      ? [
          [g1n, g1s],
          [g2n, g1s + 1],
        ]
      : [[g1n, g1s]],
    ecsize: v & 0b11111,
  };
};

export const data = [
  { id: 0b01, v: DATA_L.map(calculate) },
  { id: 0b00, v: DATA_M.map(calculate) },
  { id: 0b11, v: DATA_Q.map(calculate) },
  { id: 0b10, v: DATA_H.map(calculate) },
];

export const names = {
  min: 0,
  L: 0,
  M: 1,
  Q: 2,
  H: 3,
  max: 3,
};
