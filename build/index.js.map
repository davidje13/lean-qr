{"version":3,"file":"index.js","sources":["../src/qr/options/corrections.mjs","../src/qr/options/modes.mjs","../src/structures/Bitmap1D.mjs","../src/structures/Bitmap2D.mjs","../src/qr/options/masks.mjs","../src/qr/galoisPolynomial.mjs","../src/qr/errorCorrection.mjs","../src/qr/draw.mjs","../src/qr/score.mjs","../src/qr/generate.mjs"],"sourcesContent":["// TODO: identify algorithm for these values\n// Thanks, https://www.thonky.com/qr-code-tutorial/error-correction-table\n\n// this bit packing is compiled down to single ints, saving a lot of space\n// format: [group 2 count] | [group 1 count] | [group 1 size] | [ecsize]\n\n/* prettier-ignore */\nconst DATA_L = [\n               ( 1 << 12) | ( 19 << 5) |  7,\n               ( 1 << 12) | ( 34 << 5) | 10,\n               ( 1 << 12) | ( 55 << 5) | 15,\n               ( 1 << 12) | ( 80 << 5) | 20,\n               ( 1 << 12) | (108 << 5) | 26,\n               ( 2 << 12) | ( 68 << 5) | 18,\n               ( 2 << 12) | ( 78 << 5) | 20,\n               ( 2 << 12) | ( 97 << 5) | 24,\n               ( 2 << 12) | (116 << 5) | 30,\n  ( 2 << 18) | ( 2 << 12) | ( 68 << 5) | 18,\n               ( 4 << 12) | ( 81 << 5) | 20,\n  ( 2 << 18) | ( 2 << 12) | ( 92 << 5) | 24,\n               ( 4 << 12) | (107 << 5) | 26,\n  ( 1 << 18) | ( 3 << 12) | (115 << 5) | 30,\n  ( 1 << 18) | ( 5 << 12) | ( 87 << 5) | 22,\n  ( 1 << 18) | ( 5 << 12) | ( 98 << 5) | 24,\n  ( 5 << 18) | ( 1 << 12) | (107 << 5) | 28,\n  ( 1 << 18) | ( 5 << 12) | (120 << 5) | 30,\n  ( 4 << 18) | ( 3 << 12) | (113 << 5) | 28,\n  ( 5 << 18) | ( 3 << 12) | (107 << 5) | 28,\n  ( 4 << 18) | ( 4 << 12) | (116 << 5) | 28,\n  ( 7 << 18) | ( 2 << 12) | (111 << 5) | 28,\n  ( 5 << 18) | ( 4 << 12) | (121 << 5) | 30,\n  ( 4 << 18) | ( 6 << 12) | (117 << 5) | 30,\n  ( 4 << 18) | ( 8 << 12) | (106 << 5) | 26,\n  ( 2 << 18) | (10 << 12) | (114 << 5) | 28,\n  ( 4 << 18) | ( 8 << 12) | (122 << 5) | 30,\n  (10 << 18) | ( 3 << 12) | (117 << 5) | 30,\n  ( 7 << 18) | ( 7 << 12) | (116 << 5) | 30,\n  (10 << 18) | ( 5 << 12) | (115 << 5) | 30,\n  ( 3 << 18) | (13 << 12) | (115 << 5) | 30,\n               (17 << 12) | (115 << 5) | 30,\n  ( 1 << 18) | (17 << 12) | (115 << 5) | 30,\n  ( 6 << 18) | (13 << 12) | (115 << 5) | 30,\n  ( 7 << 18) | (12 << 12) | (121 << 5) | 30,\n  (14 << 18) | ( 6 << 12) | (121 << 5) | 30,\n  ( 4 << 18) | (17 << 12) | (122 << 5) | 30,\n  (18 << 18) | ( 4 << 12) | (122 << 5) | 30,\n  ( 4 << 18) | (20 << 12) | (117 << 5) | 30,\n  ( 6 << 18) | (19 << 12) | (118 << 5) | 30,\n];\n\n/* prettier-ignore */\nconst DATA_M = [\n               ( 1 << 12) | ( 16 << 5) | 10,\n               ( 1 << 12) | ( 28 << 5) | 16,\n               ( 1 << 12) | ( 44 << 5) | 26,\n               ( 2 << 12) | ( 32 << 5) | 18,\n               ( 2 << 12) | ( 43 << 5) | 24,\n               ( 4 << 12) | ( 27 << 5) | 16,\n               ( 4 << 12) | ( 31 << 5) | 18,\n  ( 2 << 18) | ( 2 << 12) | ( 38 << 5) | 22,\n  ( 2 << 18) | ( 3 << 12) | ( 36 << 5) | 22,\n  ( 1 << 18) | ( 4 << 12) | ( 43 << 5) | 26,\n  ( 4 << 18) | ( 1 << 12) | ( 50 << 5) | 30,\n  ( 2 << 18) | ( 6 << 12) | ( 36 << 5) | 22,\n  ( 1 << 18) | ( 8 << 12) | ( 37 << 5) | 22,\n  ( 5 << 18) | ( 4 << 12) | ( 40 << 5) | 24,\n  ( 5 << 18) | ( 5 << 12) | ( 41 << 5) | 24,\n  ( 3 << 18) | ( 7 << 12) | ( 45 << 5) | 28,\n  ( 1 << 18) | (10 << 12) | ( 46 << 5) | 28,\n  ( 4 << 18) | ( 9 << 12) | ( 43 << 5) | 26,\n  (11 << 18) | ( 3 << 12) | ( 44 << 5) | 26,\n  (13 << 18) | ( 3 << 12) | ( 41 << 5) | 26,\n               (17 << 12) | ( 42 << 5) | 26,\n               (17 << 12) | ( 46 << 5) | 28,\n  (14 << 18) | ( 4 << 12) | ( 47 << 5) | 28,\n  (14 << 18) | ( 6 << 12) | ( 45 << 5) | 28,\n  (13 << 18) | ( 8 << 12) | ( 47 << 5) | 28,\n  ( 4 << 18) | (19 << 12) | ( 46 << 5) | 28,\n  ( 3 << 18) | (22 << 12) | ( 45 << 5) | 28,\n  (23 << 18) | ( 3 << 12) | ( 45 << 5) | 28,\n  ( 7 << 18) | (21 << 12) | ( 45 << 5) | 28,\n  (10 << 18) | (19 << 12) | ( 47 << 5) | 28,\n  (29 << 18) | ( 2 << 12) | ( 46 << 5) | 28,\n  (23 << 18) | (10 << 12) | ( 46 << 5) | 28,\n  (21 << 18) | (14 << 12) | ( 46 << 5) | 28,\n  (23 << 18) | (14 << 12) | ( 46 << 5) | 28,\n  (26 << 18) | (12 << 12) | ( 47 << 5) | 28,\n  (34 << 18) | ( 6 << 12) | ( 47 << 5) | 28,\n  (14 << 18) | (29 << 12) | ( 46 << 5) | 28,\n  (32 << 18) | (13 << 12) | ( 46 << 5) | 28,\n  ( 7 << 18) | (40 << 12) | ( 47 << 5) | 28,\n  (31 << 18) | (18 << 12) | ( 47 << 5) | 28,\n];\n\n/* prettier-ignore */\nconst DATA_Q = [\n               ( 1 << 12) | ( 13 << 5) | 13,\n               ( 1 << 12) | ( 22 << 5) | 22,\n               ( 2 << 12) | ( 17 << 5) | 18,\n               ( 2 << 12) | ( 24 << 5) | 26,\n  ( 2 << 18) | ( 2 << 12) | ( 15 << 5) | 18,\n               ( 4 << 12) | ( 19 << 5) | 24,\n  ( 4 << 18) | ( 2 << 12) | ( 14 << 5) | 18,\n  ( 2 << 18) | ( 4 << 12) | ( 18 << 5) | 22,\n  ( 4 << 18) | ( 4 << 12) | ( 16 << 5) | 20,\n  ( 2 << 18) | ( 6 << 12) | ( 19 << 5) | 24,\n  ( 4 << 18) | ( 4 << 12) | ( 22 << 5) | 28,\n  ( 6 << 18) | ( 4 << 12) | ( 20 << 5) | 26,\n  ( 4 << 18) | ( 8 << 12) | ( 20 << 5) | 24,\n  ( 5 << 18) | (11 << 12) | ( 16 << 5) | 20,\n  ( 7 << 18) | ( 5 << 12) | ( 24 << 5) | 30,\n  ( 2 << 18) | (15 << 12) | ( 19 << 5) | 24,\n  (15 << 18) | ( 1 << 12) | ( 22 << 5) | 28,\n  ( 1 << 18) | (17 << 12) | ( 22 << 5) | 28,\n  ( 4 << 18) | (17 << 12) | ( 21 << 5) | 26,\n  ( 5 << 18) | (15 << 12) | ( 24 << 5) | 30,\n  ( 6 << 18) | (17 << 12) | ( 22 << 5) | 28,\n  (16 << 18) | ( 7 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (11 << 12) | ( 24 << 5) | 30,\n  (16 << 18) | (11 << 12) | ( 24 << 5) | 30,\n  (22 << 18) | ( 7 << 12) | ( 24 << 5) | 30,\n  ( 6 << 18) | (28 << 12) | ( 22 << 5) | 28,\n  (26 << 18) | ( 8 << 12) | ( 23 << 5) | 30,\n  (31 << 18) | ( 4 << 12) | ( 24 << 5) | 30,\n  (37 << 18) | ( 1 << 12) | ( 23 << 5) | 30,\n  (25 << 18) | (15 << 12) | ( 24 << 5) | 30,\n  ( 1 << 18) | (42 << 12) | ( 24 << 5) | 30,\n  (35 << 18) | (10 << 12) | ( 24 << 5) | 30,\n  (19 << 18) | (29 << 12) | ( 24 << 5) | 30,\n  ( 7 << 18) | (44 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (39 << 12) | ( 24 << 5) | 30,\n  (10 << 18) | (46 << 12) | ( 24 << 5) | 30,\n  (10 << 18) | (49 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (48 << 12) | ( 24 << 5) | 30,\n  (22 << 18) | (43 << 12) | ( 24 << 5) | 30,\n  (34 << 18) | (34 << 12) | ( 24 << 5) | 30,\n];\n\n/* prettier-ignore */\nconst DATA_H = [\n               ( 1 << 12) | (  9 << 5) | 17,\n               ( 1 << 12) | ( 16 << 5) | 28,\n               ( 2 << 12) | ( 13 << 5) | 22,\n               ( 4 << 12) | (  9 << 5) | 16,\n  ( 2 << 18) | ( 2 << 12) | ( 11 << 5) | 22,\n               ( 4 << 12) | ( 15 << 5) | 28,\n  ( 1 << 18) | ( 4 << 12) | ( 13 << 5) | 26,\n  ( 2 << 18) | ( 4 << 12) | ( 14 << 5) | 26,\n  ( 4 << 18) | ( 4 << 12) | ( 12 << 5) | 24,\n  ( 2 << 18) | ( 6 << 12) | ( 15 << 5) | 28,\n  ( 8 << 18) | ( 3 << 12) | ( 12 << 5) | 24,\n  ( 4 << 18) | ( 7 << 12) | ( 14 << 5) | 28,\n  ( 4 << 18) | (12 << 12) | ( 11 << 5) | 22,\n  ( 5 << 18) | (11 << 12) | ( 12 << 5) | 24,\n  ( 7 << 18) | (11 << 12) | ( 12 << 5) | 24,\n  (13 << 18) | ( 3 << 12) | ( 15 << 5) | 30,\n  (17 << 18) | ( 2 << 12) | ( 14 << 5) | 28,\n  (19 << 18) | ( 2 << 12) | ( 14 << 5) | 28,\n  (16 << 18) | ( 9 << 12) | ( 13 << 5) | 26,\n  (10 << 18) | (15 << 12) | ( 15 << 5) | 28,\n  ( 6 << 18) | (19 << 12) | ( 16 << 5) | 30,\n               (34 << 12) | ( 13 << 5) | 24,\n  (14 << 18) | (16 << 12) | ( 15 << 5) | 30,\n  ( 2 << 18) | (30 << 12) | ( 16 << 5) | 30,\n  (13 << 18) | (22 << 12) | ( 15 << 5) | 30,\n  ( 4 << 18) | (33 << 12) | ( 16 << 5) | 30,\n  (28 << 18) | (12 << 12) | ( 15 << 5) | 30,\n  (31 << 18) | (11 << 12) | ( 15 << 5) | 30,\n  (26 << 18) | (19 << 12) | ( 15 << 5) | 30,\n  (25 << 18) | (23 << 12) | ( 15 << 5) | 30,\n  (28 << 18) | (23 << 12) | ( 15 << 5) | 30,\n  (35 << 18) | (19 << 12) | ( 15 << 5) | 30,\n  (46 << 18) | (11 << 12) | ( 15 << 5) | 30,\n  ( 1 << 18) | (59 << 12) | ( 16 << 5) | 30,\n  (41 << 18) | (22 << 12) | ( 15 << 5) | 30,\n  (64 << 18) | ( 2 << 12) | ( 15 << 5) | 30,\n  (46 << 18) | (24 << 12) | ( 15 << 5) | 30,\n  (32 << 18) | (42 << 12) | ( 15 << 5) | 30,\n  (67 << 18) | (10 << 12) | ( 15 << 5) | 30,\n  (61 << 18) | (20 << 12) | ( 15 << 5) | 30,\n];\n\nconst calculate = (v) => {\n  const g2n = v >> 18;\n  const g1n = (v >> 12) & 0b111111;\n  const g1s = (v >> 5) & 0b1111111;\n  return {\n    capBits: (g1n * g1s + g2n * (g1s + 1)) * 8,\n    groups: g2n\n      ? [\n          [g1n, g1s],\n          [g2n, g1s + 1],\n        ]\n      : [[g1n, g1s]],\n    ecsize: v & 0b11111,\n  };\n};\n\nexport const data = [\n  { id: 0b01, v: DATA_L.map(calculate) },\n  { id: 0b00, v: DATA_M.map(calculate) },\n  { id: 0b11, v: DATA_Q.map(calculate) },\n  { id: 0b10, v: DATA_H.map(calculate) },\n];\n\nexport const names = {\n  min: 0,\n  L: 0,\n  M: 1,\n  Q: 2,\n  H: 3,\n  max: 3,\n};\n","const alnum = (c) => '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.indexOf(c);\n\nconst multi =\n  (...encodings) =>\n  (data, version) =>\n    encodings.forEach((enc) => enc(data, version));\n\nconst numeric = (value) => (data, version) => {\n  data.push(0b0001, 4);\n  data.push(value.length, version < 10 ? 10 : version < 27 ? 12 : 14);\n  let i = 0;\n  for (; i < value.length - 2; i += 3) {\n    data.push(Number(value.substr(i, 3)), 10);\n  }\n  if (i < value.length - 1) {\n    data.push(Number(value.substr(i, 2)), 7);\n  } else if (i < value.length) {\n    data.push(Number(value.substr(i, 1)), 4);\n  }\n};\n\nconst alphaNumeric = (value) => (data, version) => {\n  data.push(0b0010, 4);\n  data.push(value.length, version < 10 ? 9 : version < 27 ? 11 : 13);\n  let i = 0;\n  for (; i < value.length - 1; i += 2) {\n    data.push(alnum(value[i]) * 45 + alnum(value[i + 1]), 11);\n  }\n  if (i < value.length) {\n    data.push(alnum(value[i]), 6);\n  }\n};\n\nconst bytes = (value) => (data, version) => {\n  data.push(0b0100, 4);\n  data.push(value.length, version < 10 ? 8 : 16);\n  value.forEach((b) => data.push(b, 8));\n};\n\nconst eci = (id) => (data) => {\n  data.push(0b0111, 4);\n  data.push(id, 8);\n};\n\n// Unicode codepoints and ISO-8859-1 overlap for first 256 chars\nconst iso88591 = (value) => bytes([...value].map((c) => c.codePointAt(0)));\n\nconst utf8 = (value) => multi(eci(26), bytes(new TextEncoder().encode(value)));\n\nconst pickBest = (opts) =>\n  opts.reduce((best, part) => (part.e < best.e ? part : best));\n\nnumeric.reg = /[0-9]/;\nnumeric.est = (value, version) =>\n  4 + (version < 10 ? 10 : version < 27 ? 12 : 14) + (value.length * 10) / 3;\n\nalphaNumeric.reg = /[0-9A-Z $%*+./:-]/;\nalphaNumeric.est = (value, version) =>\n  4 + (version < 10 ? 9 : version < 27 ? 11 : 13) + value.length * 5.5;\n\niso88591.reg = /[\\u0000-\\u00FF]/;\niso88591.est = (value, version) =>\n  4 + (version < 10 ? 8 : 16) + value.length * 8;\n\nexport default {\n  auto: (value, { modes = [numeric, alphaNumeric, iso88591, utf8] } = {}) => {\n    // UTF8 is special; we cannot mix it with iso88591 since it sets a global flag.\n    // detect it, remove it as an option, and only use it if there is no other way.\n    const m = new Set(modes);\n    const allowUTF8 = m.delete(utf8);\n    if (allowUTF8) {\n      modes = [...m];\n    }\n\n    return (data, version) => {\n      /*\n       * The algorithm used here assumes that no mode can encode longer strings in less space.\n       * It progresses character by character through the input string, tracking the single\n       * lowest-cost-so-far path for each of the currently possible modes. It is possible\n       * to determine this from the previous character's lowest-cost-so-far paths, making this\n       * algorithm O(n * m^2) overall (n = characters in input, m = number of available modes),\n       * assuming the mode estimator functions are O(1)\n       */\n\n      let cur = [{ c: 0, e: 0 }];\n      for (let i = 0; i < value.length; ++i) {\n        cur = modes\n          .filter((c) => c.reg.test(value[i]))\n          .map((c) =>\n            pickBest(\n              cur.map((p) => {\n                const part = {\n                  c,\n                  p: p.c === c ? p.p : p,\n                  s: p.c === c ? p.s : i,\n                };\n                part.v = value.substring(part.s, i + 1);\n                part.e = part.p.e + Math.ceil(c.est(part.v, version));\n                return part;\n              }),\n            ),\n          );\n        if (!cur.length) {\n          if (allowUTF8) {\n            utf8(value)(data, version);\n            return;\n          }\n          throw new Error('Unencodable');\n        }\n      }\n      const parts = [];\n      for (let part = pickBest(cur); part.c; part = part.p) {\n        parts.unshift(part.c(part.v));\n      }\n      parts.forEach((enc) => enc(data, version));\n    };\n  },\n  multi,\n  eci,\n  numeric,\n  alphaNumeric,\n  bytes,\n  iso8859_1: iso88591,\n  utf8,\n};\n","export default class Bitmap1D {\n  constructor(capacityBytes) {\n    this.bytes = new Uint8Array(capacityBytes);\n    this.bits = 0;\n  }\n\n  push(value, bits) {\n    for (let b = bits, r = 8 - (this.bits & 7); b > 0; b -= r, r = 8) {\n      this.bytes[this.bits >>> 3] |= (value << r) >>> b;\n      this.bits += Math.min(b, r);\n    }\n  }\n}\n","function getCol(v) {\n  if (!Array.isArray(v)) {\n    // legacy: assume a little-endian colour (ABGR)\n    v = [v & 255, (v >>> 8) & 255, (v >>> 16) & 255, v >>> 24];\n  }\n  const b = new Uint8Array([...v, 255]);\n  return new Uint32Array(b.buffer, 0, 1)[0];\n}\n\nexport default class Bitmap2D {\n  constructor({ size, d }) {\n    this.size = size;\n    this.d = new Uint8Array(d || size * size);\n  }\n\n  get(x, y) {\n    return (\n      x >= 0 &&\n      y >= 0 &&\n      x < this.size &&\n      y < this.size &&\n      !!(this.d[y * this.size + x] & 0b01)\n    );\n  }\n\n  masked(x, y) {\n    return this.d[y * this.size + x] & 0b10;\n  }\n\n  set(x, y, value, mask = 1) {\n    this.d[y * this.size + x] = (mask * 0b10) | !!value;\n  }\n\n  inv(x, y) {\n    this.d[y * this.size + x] ^= 1;\n  }\n\n  toString({ on = '##', off = '  ', lf = '\\n', padX = 4, padY = 4 } = {}) {\n    let r = '';\n    for (let y = -padY; y < this.size + padY; ++y) {\n      for (let x = -padX; x < this.size + padX; ++x) {\n        r += this.get(x, y) ? on : off;\n      }\n      r += lf;\n    }\n    return r;\n  }\n\n  toImageData(\n    context,\n    { on = 0xff000000, off = 0x00000000, padX = 4, padY = 4 } = {},\n  ) {\n    const fullX = this.size + padX * 2;\n    const fullY = this.size + padY * 2;\n    const target = context.createImageData(fullX, fullY);\n    const abgr = new Uint32Array(target.data.buffer);\n    const cOn = getCol(on);\n    const cOff = getCol(off);\n    for (let y = 0; y < fullY; ++y) {\n      for (let x = 0; x < fullX; ++x) {\n        abgr[y * fullX + x] = this.get(x - padX, y - padY) ? cOn : cOff;\n      }\n    }\n    return target;\n  }\n\n  toCanvas(canvas, options) {\n    const ctx = canvas.getContext('2d');\n    const data = this.toImageData(ctx, options);\n    canvas.width = data.width;\n    canvas.height = data.height;\n    ctx.putImageData(data, 0, 0);\n  }\n\n  toDataURL({ type = 'image/png', scale = 1, ...options } = {}) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const data = this.toImageData(ctx, options);\n    canvas.width = data.width * scale;\n    canvas.height = data.height * scale;\n    ctx.putImageData(data, 0, 0);\n    ctx.imageSmoothingEnabled = false;\n    ctx.globalCompositeOperation = 'copy';\n    ctx.drawImage(\n      canvas,\n      0,\n      0,\n      data.width,\n      data.height,\n      0,\n      0,\n      canvas.width,\n      canvas.height,\n    );\n    return canvas.toDataURL(type, 1);\n  }\n}\n","export default [\n  (x, y) => !((x ^ y) & 1),\n  (x, y) => !(y & 1),\n  (x) => !(x % 3),\n  (x, y) => !((x + y) % 3),\n  (x, y) => !((Math.floor(x / 3) ^ Math.floor(y / 2)) & 1),\n  (x, y) => !((x & y & 1) + ((x * y) % 3)),\n  (x, y) => !(((x & y & 1) + ((x * y) % 3)) & 1),\n  (x, y) => !((((x ^ y) & 1) + ((x * y) % 3)) & 1),\n];\n","const LOG = new Uint8Array(512);\nLOG[0] = 1;\nfor (let i = 0, v = 1; i < 255; LOG[++i] = v) {\n  LOG[v + 256] = i;\n  v *= 2;\n  if (v & 256) {\n    v ^= 285;\n  }\n}\nconst e = (x) => LOG[x % 255]; // assume x is never negative\nconst ln = (x) => LOG[x + 256];\n\nexport const mult256PolyLn = (p1Ln, p2Ln) => {\n  const result = new Uint8Array(p1Ln.length + p2Ln.length - 1);\n  for (let i = 0; i < p1Ln.length; ++i) {\n    for (let j = 0; j < p2Ln.length; ++j) {\n      result[i + j] ^= e(p1Ln[i] + p2Ln[j]);\n    }\n  }\n  return result.map(ln);\n};\n\nexport const rem256Poly = (num, denLn) => {\n  const remainder = new Uint8Array(num.length + denLn.length - 1);\n  remainder.set(num, 0);\n  for (let i = 0; i < num.length; ++i) {\n    if (remainder[i]) {\n      // assume denLn[0] === 0 (true for all generator polys)\n      const shift = ln(remainder[i]); // - denLn[0];\n      for (let j = 0; j < denLn.length; ++j) {\n        remainder[i + j] ^= e(denLn[j] + shift);\n      }\n    }\n  }\n  return remainder.slice(num.length);\n};\n","import { mult256PolyLn, rem256Poly } from './galoisPolynomial.mjs';\n\nconst generators = [[0], [0, 0]];\nfor (let i = 1, last = generators[1]; i < 30; ++i) {\n  const next = mult256PolyLn(last, [0, i]);\n  generators.push(next);\n  last = next;\n}\n\nconst interleave = (target, offset, blocks) => {\n  let p = offset;\n  const lim = Math.max(...blocks.map((block) => block.length));\n  for (let i = 0; i < lim; ++i) {\n    blocks.forEach((block) => {\n      if (i < block.length) {\n        target[p++] = block[i];\n      }\n    });\n  }\n  return p;\n};\n\nexport default (versionBytes, { groups, ecsize }) => {\n  const blocks = [];\n  const eccs = [];\n\n  let p = 0;\n  let size = 0;\n  groups.forEach(([nBlocks, bytes]) => {\n    for (let b = 0; b < nBlocks; ++b, p += bytes) {\n      const block = versionBytes.slice(p, p + bytes);\n      blocks.push(block);\n      eccs.push(rem256Poly(block, generators[ecsize]));\n    }\n    size += nBlocks * (bytes + ecsize);\n  });\n\n  const result = new Uint8Array(size);\n  const pos = interleave(result, 0, blocks);\n  interleave(result, pos, eccs);\n  return result;\n};\n","const remBinPoly = (num, den, denBits) => {\n  let remainder = num << (denBits - 1);\n  for (let i = 0x8000000; i; i >>>= 1) {\n    if (remainder & i) {\n      remainder ^= den * (i >>> (denBits - 1));\n    }\n  }\n  return remainder;\n};\n\nconst drawRect = (code, x1, y1, x2, y2, value) => {\n  for (let y = y1; y < y2; ++y) {\n    for (let x = x1; x < x2; ++x) {\n      code.set(x, y, value);\n    }\n  }\n};\n\nconst drawPlacement = (code, x, y) => {\n  drawRect(code, x - 3, y - 3, x + 4, y + 4, 1);\n  drawRect(code, x - 2, y - 2, x + 3, y + 3, 0);\n  drawRect(code, x - 1, y - 1, x + 2, y + 2, 1);\n};\n\nconst drawAlignment = (code, x, y) => {\n  drawRect(code, x - 2, y - 2, x + 3, y + 3, 1);\n  drawRect(code, x - 1, y - 1, x + 2, y + 2, 0);\n  code.set(x, y, 1);\n};\n\nexport const drawFrame = (code, version) => {\n  const size = version * 4 + 17;\n  drawPlacement(code, 3, 3);\n  drawPlacement(code, size - 4, 3);\n  drawPlacement(code, 3, size - 4);\n  drawRect(code, 0, 7, 9, 9, 0);\n  drawRect(code, 7, 0, 9, 7, 0);\n  drawRect(code, size - 8, 7, size, 9, 0);\n  drawRect(code, size - 8, 0, size - 7, 7, 0);\n  drawRect(code, 7, size - 8, 9, size, 0);\n  drawRect(code, 0, size - 8, 7, size - 7, 0);\n  code.set(8, size - 8, 1);\n  for (let i = 8; i < size - 8; ++i) {\n    code.set(i, 6, !(i & 1));\n    code.set(6, i, !(i & 1));\n  }\n  if (version >= 2) {\n    const numAlignmentM = Math.floor(version / 7) + 1;\n    // alignment boxes must always be positioned on even pixels\n    // and are spaced evenly from the bottom right (except top and left which are always 6)\n    // the -0.25 avoids a quirk in the spec for version 32\n    const stepAlignment = Math.ceil((size - 13) / numAlignmentM / 2 - 0.25) * 2;\n    const positions = [6];\n    for (let i = numAlignmentM; i-- > 0; ) {\n      positions.push(size - 7 - i * stepAlignment);\n    }\n    for (let i = 0; i <= numAlignmentM; ++i) {\n      for (let j = 0; j <= numAlignmentM; ++j) {\n        if (\n          (!i && !j) ||\n          (!i && j === numAlignmentM) ||\n          (i === numAlignmentM && !j)\n        ) {\n          continue;\n        }\n        drawAlignment(code, positions[i], positions[j]);\n      }\n    }\n  }\n  if (version >= 7) {\n    for (\n      let dat = (version << 12) | remBinPoly(version, 0b1111100100101, 13),\n        j = 0;\n      j < 6;\n      ++j\n    ) {\n      for (let i = 12; i-- > 9; dat >>>= 1) {\n        code.set(j, size - i, dat & 1);\n        code.set(size - i, j, dat & 1);\n      }\n    }\n  }\n};\n\nexport const getPath = (code) => {\n  const s = code.size;\n  const result = [];\n  for (let xB = s - 2, y = s, dirY = -1; xB >= 0; xB -= 2) {\n    if (xB === 5) {\n      // special case: skip vertical timing pattern line\n      xB = 4;\n    }\n    while (((y += dirY), y !== -1 && y !== s)) {\n      if (!code.masked(xB + 1, y)) {\n        result.push([xB + 1, y]);\n      }\n      if (!code.masked(xB, y)) {\n        result.push([xB, y]);\n      }\n    }\n    dirY *= -1;\n  }\n  return result;\n};\n\nexport const drawCode = (target, path, data) => {\n  path.forEach(([x, y], bit) =>\n    target.set(x, y, (data[bit >> 3] << (bit & 7)) & 0x80, 0),\n  );\n};\n\nexport const applyMask = (target, mask, maskId, ecId) => {\n  const s = target.size;\n  for (let y = 0; y < s; ++y) {\n    for (let x = 0; x < s; ++x) {\n      if (mask(x, y) && !target.masked(x, y)) {\n        target.inv(x, y);\n      }\n    }\n  }\n  const info = (ecId << 3) | maskId;\n  let pattern =\n    0b101010000010010 ^ ((info << 10) | remBinPoly(info, 0b10100110111, 11));\n  for (let i = 8; i-- > 0; pattern >>= 1) {\n    target.set(8, (i > 1 ? 7 : 8) - i, pattern & 1);\n    target.set(s - 8 + i, 8, pattern & 1);\n  }\n  for (let i = 7; i-- > 0; pattern >>= 1) {\n    target.set(i > 5 ? 7 : i, 8, pattern & 1);\n    target.set(8, s - i - 1, pattern & 1);\n  }\n};\n","const hv = (code, state0, fn) => {\n  for (let i = 0; i < code.size; ++i) {\n    let stateX = state0;\n    let stateY = state0;\n    for (let j = 0; j < code.size; ++j) {\n      stateX = fn(stateX, code.get(j, i));\n      stateY = fn(stateY, code.get(i, j));\n    }\n  }\n};\n\nexport const scoreLines = (code) => {\n  let score = 0;\n  hv(code, [0], ([consec, last], cur) => {\n    if (cur !== last) {\n      return [1, cur];\n    }\n    if (consec === 4) {\n      score += 3;\n    } else if (consec > 4) {\n      ++score;\n    }\n    return [consec + 1, last];\n  });\n  return score;\n};\n\nexport const countBoxes = (code) => {\n  let score = 0;\n  for (let x = 1; x < code.size; ++x) {\n    let lastV = code.get(x - 1, 0);\n    let lastM = code.get(x, 0) === lastV;\n    for (let y = 1; y < code.size; ++y) {\n      const curV = code.get(x - 1, y);\n      const curM = code.get(x, y) === curV;\n      score += lastM && curM && lastV === curV;\n      lastV = curV;\n      lastM = curM;\n    }\n  }\n  return score;\n};\n\nexport const countPatterns = (code) => {\n  let score = 0;\n  const initial = 0b10000000000_10000000000;\n  const pattern = 0b10111010000_00001011101;\n  const matches = 0b00000000001_00000000001;\n  hv(code, 0, (state, cur) => {\n    const next = ((state >>> 1) | initial) & (pattern ^ (cur ? 0 : -1));\n    if (next & matches) {\n      ++score;\n    }\n    return next;\n  });\n  return score;\n};\n\nexport const scoreImbalance = (code) => {\n  let totalOn = 0;\n  for (let y = 0; y < code.size; ++y) {\n    for (let x = 0; x < code.size; ++x) {\n      totalOn += code.get(x, y);\n    }\n  }\n  return (\n    Math.floor(20 * Math.abs(totalOn / (code.size * code.size) - 0.5)) * 10\n  );\n};\n\nexport default (code) =>\n  scoreLines(code) +\n  countBoxes(code) * 3 +\n  countPatterns(code) * 40 +\n  scoreImbalance(code);\n","import Bitmap1D from '../structures/Bitmap1D.mjs';\nimport Bitmap2D from '../structures/Bitmap2D.mjs';\nimport modes from './options/modes.mjs';\nimport masks from './options/masks.mjs';\nimport {\n  data as correctionData,\n  names as correctionNames,\n} from './options/corrections.mjs';\nimport calculateEC from './errorCorrection.mjs';\nimport { drawFrame, getPath, drawCode, applyMask } from './draw.mjs';\nimport scoreCode from './score.mjs';\n\nconst baseCache = [];\nconst getBase = (version) => {\n  let cached = baseCache[version];\n  if (!cached) {\n    const c = new Bitmap2D({ size: version * 4 + 17 });\n    drawFrame(c, version);\n    baseCache[version] = cached = [c, getPath(c)];\n  }\n  return [new Bitmap2D(cached[0]), cached[1]];\n};\n\nexport default (\n  modeData,\n  {\n    minCorrectionLevel = correctionNames.min,\n    maxCorrectionLevel = correctionNames.max,\n    minVersion = 1,\n    maxVersion = 40,\n    mask = null,\n  } = {},\n) => {\n  if (maxCorrectionLevel < minCorrectionLevel) {\n    throw new Error('Invalid correction level range');\n  }\n  if (maxVersion < minVersion) {\n    throw new Error('Invalid version range');\n  }\n  if (typeof modeData === 'string') {\n    modeData = modes.auto(modeData);\n  }\n\n  let dataLengthBits = 0;\n  for (let version = minVersion; version <= maxVersion; ++version) {\n    if (\n      correctionData[minCorrectionLevel].v[version - 1].capBits < dataLengthBits\n    ) {\n      continue;\n    }\n\n    const data = new Bitmap1D(2956); // max capacity of any code\n    modeData(data, version);\n    dataLengthBits = data.bits;\n\n    for (let cl = maxCorrectionLevel; cl >= minCorrectionLevel; --cl) {\n      const correction = correctionData[cl];\n      const versionedCorrection = correction.v[version - 1];\n      if (versionedCorrection.capBits < dataLengthBits) {\n        continue;\n      }\n      data.push(0b0000, 4);\n      data.bits = (data.bits + 7) & ~7; // pad with 0s to the next byte\n      while (data.bits < versionedCorrection.capBits) {\n        data.push(0b11101100_00010001, 16);\n      }\n      const [code, path] = getBase(version);\n      drawCode(code, path, calculateEC(data.bytes, versionedCorrection));\n      if (mask !== null) {\n        applyMask(code, masks[mask], mask, correction.id);\n        return code;\n      }\n\n      // pick best mask\n      return masks\n        .map((m, maskId) => {\n          const masked = new Bitmap2D(code);\n          applyMask(masked, m, maskId, correction.id);\n          masked.s = scoreCode(masked);\n          return masked;\n        })\n        .reduce((best, masked) => (masked.s < best.s ? masked : best));\n    }\n  }\n  throw new Error('Too much data');\n};\n"],"names":["calculate","v","g2n","g1n","g1s","capBits","groups","ecsize","data","id","map","names","min","L","M","Q","H","max","alnum","c","indexOf","multi","_len","arguments","length","encodings","Array","_key","version","forEach","enc","numeric","value","push","i","Number","substr","alphaNumeric","bytes","b","eci","iso88591","codePointAt","utf8","TextEncoder","encode","pickBest","opts","reduce","best","part","e","reg","est","modes","auto","m","Set","allowUTF8","delete","cur","filter","test","p","s","substring","Math","ceil","Error","parts","unshift","iso8859_1","Bitmap1D","constructor","capacityBytes","this","Uint8Array","bits","r","getCol","isArray","Uint32Array","buffer","Bitmap2D","_ref","size","d","get","x","y","masked","set","mask","inv","toString","on","off","lf","padX","padY","toImageData","context","fullX","fullY","target","createImageData","abgr","cOn","cOff","toCanvas","canvas","options","ctx","getContext","width","height","putImageData","toDataURL","type","scale","document","createElement","imageSmoothingEnabled","globalCompositeOperation","drawImage","masks","floor","LOG","ln","mult256PolyLn","p1Ln","p2Ln","result","j","rem256Poly","num","denLn","remainder","shift","slice","generators","last","next","interleave","offset","blocks","lim","block","calculateEC","versionBytes","eccs","_ref2","nBlocks","pos","remBinPoly","den","denBits","drawRect","code","x1","y1","x2","y2","drawPlacement","drawAlignment","getPath","xB","dirY","drawCode","path","bit","applyMask","maskId","ecId","info","pattern","hv","state0","fn","stateX","stateY","score","consec","scoreLines","lastV","lastM","curV","curM","countBoxes","state","countPatterns","totalOn","abs","scoreImbalance","baseCache","getBase","cached","numAlignmentM","stepAlignment","positions","dat","drawFrame","modeData","minCorrectionLevel","correctionNames","maxCorrectionLevel","minVersion","maxVersion","dataLengthBits","correctionData","cl","correction","versionedCorrection","scoreCode"],"mappings":"oEAOA,MA+KMA,EAAaC,IACjB,MAAMC,EAAMD,GAAK,GACXE,EAAOF,GAAK,GAAM,GAClBG,EAAOH,GAAK,EAAK,IACvB,MAAO,CACLI,QAAyC,GAA/BF,EAAMC,EAAMF,GAAOE,EAAM,IACnCE,OAAQJ,EACJ,CACE,CAACC,EAAKC,GACN,CAACF,EAAKE,EAAM,IAEd,CAAC,CAACD,EAAKC,IACXG,OAAY,GAAJN,IAICO,EAAO,CAClB,CAAEC,GAAI,EAAMR,EAhMC,CACE,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACb,OACa,MACb,OACa,MACb,OACA,OACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,QACD,QACC,QACD,QACC,OACY,MACZ,OACA,QACA,QACD,QACC,QACD,QACC,QACA,SAwJoBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EArJC,CACE,KACA,KACA,KACA,KACA,KACA,MACA,MACb,OACA,OACA,OACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,QACD,QACA,QACa,MACA,MACb,QACA,QACA,QACC,QACA,OACD,QACC,QACD,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACC,QACD,SA6GqBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EA1GC,CACE,KACA,KACA,KACA,KACb,OACa,MACb,QACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,OACD,QACC,OACA,QACA,QACA,QACD,QACA,QACA,QACA,QACC,QACD,QACA,QACA,QACA,QACC,OACD,QACA,QACC,QACD,QACA,QACA,QACA,QACA,QACA,SAkEqBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EA/DC,CACE,KACA,KACA,KACA,MACb,OACa,MACb,OACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACD,QACA,QACA,QACA,QACA,QACC,QACY,OACb,QACC,OACD,QACC,QACD,QACA,QACA,QACA,QACA,QACA,QACA,SACC,OACD,SACA,SACA,SACA,QACA,SACA,UAuBqBS,IAAIV,KAGfW,EAAQ,CACnBC,IAAK,EACLC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,IAAK,GCnNDC,EAASC,GAAM,gDAAgDC,QAAQD,GAEvEE,EACJ,WAAA,IAAA,IAAAC,EAAAC,UAAAC,OAAIC,EAAJ,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAIF,EAAJE,GAAAJ,UAAAI,GAAA,MACA,CAACnB,EAAMoB,IACLH,EAAUI,SAASC,GAAQA,EAAItB,EAAMoB,MAEnCG,EAAWC,GAAU,CAACxB,EAAMoB,KAChCpB,EAAKyB,KAAK,EAAQ,GAClBzB,EAAKyB,KAAKD,EAAMR,OAAQI,EAAU,GAAK,GAAKA,EAAU,GAAK,GAAK,IAChE,IAAIM,EAAI,EACR,KAAOA,EAAIF,EAAMR,OAAS,EAAGU,GAAK,EAChC1B,EAAKyB,KAAKE,OAAOH,EAAMI,OAAOF,EAAG,IAAK,IAEpCA,EAAIF,EAAMR,OAAS,EACrBhB,EAAKyB,KAAKE,OAAOH,EAAMI,OAAOF,EAAG,IAAK,GAC7BA,EAAIF,EAAMR,QACnBhB,EAAKyB,KAAKE,OAAOH,EAAMI,OAAOF,EAAG,IAAK,IAIpCG,EAAgBL,GAAU,CAACxB,EAAMoB,KACrCpB,EAAKyB,KAAK,EAAQ,GAClBzB,EAAKyB,KAAKD,EAAMR,OAAQI,EAAU,GAAK,EAAIA,EAAU,GAAK,GAAK,IAC/D,IAAIM,EAAI,EACR,KAAOA,EAAIF,EAAMR,OAAS,EAAGU,GAAK,EAChC1B,EAAKyB,KAAuB,GAAlBf,EAAMc,EAAME,IAAWhB,EAAMc,EAAME,EAAI,IAAK,IAEpDA,EAAIF,EAAMR,QACZhB,EAAKyB,KAAKf,EAAMc,EAAME,IAAK,IAIzBI,EAASN,GAAU,CAACxB,EAAMoB,KAC9BpB,EAAKyB,KAAK,EAAQ,GAClBzB,EAAKyB,KAAKD,EAAMR,OAAQI,EAAU,GAAK,EAAI,IAC3CI,EAAMH,SAASU,GAAM/B,EAAKyB,KAAKM,EAAG,MAG9BC,EAAO/B,GAAQD,IACnBA,EAAKyB,KAAK,EAAQ,GAClBzB,EAAKyB,KAAKxB,EAAI,IAIVgC,EAAYT,GAAUM,EAAM,IAAIN,GAAOtB,KAAKS,GAAMA,EAAEuB,YAAY,MAEhEC,EAAQX,GAAUX,EAAMmB,EAAI,IAAKF,GAAM,IAAIM,aAAcC,OAAOb,KAEhEc,EAAYC,GAChBA,EAAKC,QAAO,CAACC,EAAMC,IAAUA,EAAKC,EAAIF,EAAKE,EAAID,EAAOD,IAExDlB,EAAQqB,IAAM,QACdrB,EAAQsB,IAAM,CAACrB,EAAOJ,IACpB,GAAKA,EAAU,GAAK,GAAKA,EAAU,GAAK,GAAK,IAAsB,GAAfI,EAAMR,OAAe,EAE3Ea,EAAae,IAAM,oBACnBf,EAAagB,IAAM,CAACrB,EAAOJ,IACzB,GAAKA,EAAU,GAAK,EAAIA,EAAU,GAAK,GAAK,IAAqB,IAAfI,EAAMR,OAE1DiB,EAASW,IAAM,kBACfX,EAASY,IAAM,CAACrB,EAAOJ,IACrB,GAAKA,EAAU,GAAK,EAAI,IAAqB,EAAfI,EAAMR,OAEtC,IAAe8B,EAAA,CACbC,KAAM,SAACvB,GAAoE,IAA7DsB,MAAEA,EAAQ,CAACvB,EAASM,EAAcI,EAAUE,2DAAU,GAGlE,MAAMa,EAAI,IAAIC,IAAIH,GACZI,EAAYF,EAAEG,OAAOhB,GAK3B,OAJIe,IACFJ,EAAQ,IAAIE,IAGP,CAAChD,EAAMoB,KAUZ,IAAIgC,EAAM,CAAC,CAAEzC,EAAG,EAAGgC,EAAG,IACtB,IAAK,IAAIjB,EAAI,EAAGA,EAAIF,EAAMR,SAAUU,EAiBlC,GAhBA0B,EAAMN,EACHO,QAAQ1C,GAAMA,EAAEiC,IAAIU,KAAK9B,EAAME,MAC/BxB,KAAKS,GACJ2B,EACEc,EAAIlD,KAAKqD,IACP,MAAMb,EAAO,CACX/B,EAAAA,EACA4C,EAAGA,EAAE5C,IAAMA,EAAI4C,EAAEA,EAAIA,EACrBC,EAAGD,EAAE5C,IAAMA,EAAI4C,EAAEC,EAAI9B,GAIvB,OAFAgB,EAAKjD,EAAI+B,EAAMiC,UAAUf,EAAKc,EAAG9B,EAAI,GACrCgB,EAAKC,EAAID,EAAKa,EAAEZ,EAAIe,KAAKC,KAAKhD,EAAEkC,IAAIH,EAAKjD,EAAG2B,IACrCsB,SAIVU,EAAIpC,OAAQ,CACf,GAAIkC,EAEF,YADAf,EAAKX,EAALW,CAAYnC,EAAMoB,GAGpB,MAAM,IAAIwC,MAAM,eAGpB,MAAMC,EAAQ,GACd,IAAK,IAAInB,EAAOJ,EAASc,GAAMV,EAAK/B,EAAG+B,EAAOA,EAAKa,EACjDM,EAAMC,QAAQpB,EAAK/B,EAAE+B,EAAKjD,IAE5BoE,EAAMxC,SAASC,GAAQA,EAAItB,EAAMoB,OAGrCP,MAAAA,EACAmB,IAAAA,EACAT,QAAAA,EACAM,aAAAA,EACAC,MAAAA,EACAiC,UAAW9B,EACXE,KAAAA,GC3Ha,MAAM6B,EACnBC,YAAYC,GACVC,KAAKrC,MAAQ,IAAIsC,WAAWF,GAC5BC,KAAKE,KAAO,EAGd5C,KAAKD,EAAO6C,GACV,IAAK,IAAItC,EAAIsC,EAAMC,EAAI,GAAiB,EAAZH,KAAKE,MAAWtC,EAAI,EAAGA,GAAKuC,EAAGA,EAAI,EAC7DH,KAAKrC,MAAMqC,KAAKE,OAAS,IAAO7C,GAAS8C,IAAOvC,EAChDoC,KAAKE,MAAQX,KAAKtD,IAAI2B,EAAGuC,ICT/B,SAASC,EAAO9E,GACTyB,MAAMsD,QAAQ/E,KAEjBA,EAAI,CAAK,IAAJA,EAAUA,IAAM,EAAK,IAAMA,IAAM,GAAM,IAAKA,IAAM,KAEzD,MAAMsC,EAAI,IAAIqC,WAAW,IAAI3E,EAAG,MAChC,OAAO,IAAIgF,YAAY1C,EAAE2C,OAAQ,EAAG,GAAG,GAG1B,MAAMC,EACnBV,YAAyBW,GAAA,IAAbC,KAAEA,EAAFC,EAAQA,GAAKF,EACvBT,KAAKU,KAAOA,EACZV,KAAKW,EAAI,IAAIV,WAAWU,GAAKD,EAAOA,GAGtCE,IAAIC,EAAGC,GACL,OACED,GAAK,GACLC,GAAK,GACLD,EAAIb,KAAKU,MACTI,EAAId,KAAKU,SACsB,EAA5BV,KAAKW,EAAEG,EAAId,KAAKU,KAAOG,IAI9BE,OAAOF,EAAGC,GACR,OAAmC,EAA5Bd,KAAKW,EAAEG,EAAId,KAAKU,KAAOG,GAGhCG,IAAIH,EAAGC,EAAGzD,GAAiB,IAAV4D,yDAAO,EACtBjB,KAAKW,EAAEG,EAAId,KAAKU,KAAOG,GAAa,EAAPI,IAAiB5D,EAGhD6D,IAAIL,EAAGC,GACLd,KAAKW,EAAEG,EAAId,KAAKU,KAAOG,IAAM,EAG/BM,WAAwE,IAA/DC,GAAEA,EAAK,KAAPC,IAAaA,EAAM,KAAnBC,GAAyBA,EAAK,KAA9BC,KAAoCA,EAAO,EAA3CC,KAA8CA,EAAO,0DAAM,GAC9DrB,EAAI,GACR,IAAK,IAAIW,GAAKU,EAAMV,EAAId,KAAKU,KAAOc,IAAQV,EAAG,CAC7C,IAAK,IAAID,GAAKU,EAAMV,EAAIb,KAAKU,KAAOa,IAAQV,EAC1CV,GAAKH,KAAKY,IAAIC,EAAGC,GAAKM,EAAKC,EAE7BlB,GAAKmB,EAEP,OAAOnB,EAGTsB,YACEC,GAEA,IADAN,GAAEA,EAAK,WAAPC,IAAmBA,EAAM,EAAzBE,KAAqCA,EAAO,EAA5CC,KAA+CA,EAAO,0DAAM,GAE5D,MAAMG,EAAQ3B,KAAKU,KAAc,EAAPa,EACpBK,EAAQ5B,KAAKU,KAAc,EAAPc,EACpBK,EAASH,EAAQI,gBAAgBH,EAAOC,GACxCG,EAAO,IAAIzB,YAAYuB,EAAOhG,KAAK0E,QACnCyB,EAAM5B,EAAOgB,GACba,EAAO7B,EAAOiB,GACpB,IAAK,IAAIP,EAAI,EAAGA,EAAIc,IAASd,EAC3B,IAAK,IAAID,EAAI,EAAGA,EAAIc,IAASd,EAC3BkB,EAAKjB,EAAIa,EAAQd,GAAKb,KAAKY,IAAIC,EAAIU,EAAMT,EAAIU,GAAQQ,EAAMC,EAG/D,OAAOJ,EAGTK,SAASC,EAAQC,GACf,MAAMC,EAAMF,EAAOG,WAAW,MACxBzG,EAAOmE,KAAKyB,YAAYY,EAAKD,GACnCD,EAAOI,MAAQ1G,EAAK0G,MACpBJ,EAAOK,OAAS3G,EAAK2G,OACrBH,EAAII,aAAa5G,EAAM,EAAG,GAG5B6G,YAA8D,IAApDC,KAAEA,EAAO,YAATC,MAAsBA,EAAQ,KAAMR,0DAAY,GACxD,MAAMD,EAASU,SAASC,cAAc,UAChCT,EAAMF,EAAOG,WAAW,MACxBzG,EAAOmE,KAAKyB,YAAYY,EAAKD,GAiBnC,OAhBAD,EAAOI,MAAQ1G,EAAK0G,MAAQK,EAC5BT,EAAOK,OAAS3G,EAAK2G,OAASI,EAC9BP,EAAII,aAAa5G,EAAM,EAAG,GAC1BwG,EAAIU,uBAAwB,EAC5BV,EAAIW,yBAA2B,OAC/BX,EAAIY,UACFd,EACA,EACA,EACAtG,EAAK0G,MACL1G,EAAK2G,OACL,EACA,EACAL,EAAOI,MACPJ,EAAOK,QAEFL,EAAOO,UAAUC,EAAM,IC9FlC,IAAAO,EAAe,CACb,CAACrC,EAAGC,MAAkB,GAATD,EAAIC,IACjB,CAACD,EAAGC,MAAY,EAAJA,GACXD,KAAQA,EAAI,GACb,CAACA,EAAGC,OAASD,EAAIC,GAAK,GACtB,CAACD,EAAGC,MAAkD,GAAzCvB,KAAK4D,MAAMtC,EAAI,GAAKtB,KAAK4D,MAAMrC,EAAI,KAChD,CAACD,EAAGC,OAASD,EAAIC,EAAI,GAAOD,EAAIC,EAAK,GACrC,CAACD,EAAGC,OAAUD,EAAIC,EAAI,GAAOD,EAAIC,EAAK,EAAM,GAC5C,CAACD,EAAGC,OAAoB,GAATD,EAAIC,IAAYD,EAAIC,EAAK,EAAM,ICRhD,MAAMsC,EAAM,IAAInD,WAAW,KAC3BmD,EAAI,GAAK,EACT,IAAK,IAAI7F,EAAI,EAAGjC,EAAI,EAAGiC,EAAI,IAAK6F,IAAM7F,GAAKjC,EACzC8H,EAAI9H,EAAI,KAAOiC,EACfjC,GAAK,EACG,IAAJA,IACFA,GAAK,KAGT,MAAMkD,EAAKqC,GAAMuC,EAAIvC,EAAI,KACnBwC,EAAMxC,GAAMuC,EAAIvC,EAAI,KAEbyC,EAAgB,CAACC,EAAMC,KAClC,MAAMC,EAAS,IAAIxD,WAAWsD,EAAK1G,OAAS2G,EAAK3G,OAAS,GAC1D,IAAK,IAAIU,EAAI,EAAGA,EAAIgG,EAAK1G,SAAUU,EACjC,IAAK,IAAImG,EAAI,EAAGA,EAAIF,EAAK3G,SAAU6G,EACjCD,EAAOlG,EAAImG,IAAMlF,EAAE+E,EAAKhG,GAAKiG,EAAKE,IAGtC,OAAOD,EAAO1H,IAAIsH,IAGPM,EAAa,CAACC,EAAKC,KAC9B,MAAMC,EAAY,IAAI7D,WAAW2D,EAAI/G,OAASgH,EAAMhH,OAAS,GAC7DiH,EAAU9C,IAAI4C,EAAK,GACnB,IAAK,IAAIrG,EAAI,EAAGA,EAAIqG,EAAI/G,SAAUU,EAChC,GAAIuG,EAAUvG,GAAI,CAEhB,MAAMwG,EAAQV,EAAGS,EAAUvG,IAC3B,IAAK,IAAImG,EAAI,EAAGA,EAAIG,EAAMhH,SAAU6G,EAClCI,EAAUvG,EAAImG,IAAMlF,EAAEqF,EAAMH,GAAKK,GAIvC,OAAOD,EAAUE,MAAMJ,EAAI/G,SChCvBoH,EAAa,CAAC,CAAC,GAAI,CAAC,EAAG,IAC7B,IAAK,IAAI1G,EAAI,EAAG2G,EAAOD,EAAW,GAAI1G,EAAI,KAAMA,EAAG,CACjD,MAAM4G,EAAOb,EAAcY,EAAM,CAAC,EAAG3G,IACrC0G,EAAW3G,KAAK6G,GAChBD,EAAOC,EAGT,MAAMC,EAAa,CAACvC,EAAQwC,EAAQC,KAClC,IAAIlF,EAAIiF,EACR,MAAME,EAAMhF,KAAKjD,OAAOgI,EAAOvI,KAAKyI,GAAUA,EAAM3H,UACpD,IAAK,IAAIU,EAAI,EAAGA,EAAIgH,IAAOhH,EACzB+G,EAAOpH,SAASsH,IACVjH,EAAIiH,EAAM3H,SACZgF,EAAOzC,KAAOoF,EAAMjH,OAI1B,OAAO6B,GAGT,IAAAqF,EAAe,CAACC,EAAqCjE,KAAA,IAAvB9E,OAAEA,EAAFC,OAAUA,GAAa6E,EACnD,MAAM6D,EAAS,GACTK,EAAO,GAEb,IAAIvF,EAAI,EACJsB,EAAO,EACX/E,EAAOuB,SAAQ0H,IAAsB,IAApBC,EAASlH,GAAWiH,EACnC,IAAK,IAAIhH,EAAI,EAAGA,EAAIiH,IAAWjH,EAAGwB,GAAKzB,EAAO,CAC5C,MAAM6G,EAAQE,EAAaV,MAAM5E,EAAGA,EAAIzB,GACxC2G,EAAOhH,KAAKkH,GACZG,EAAKrH,KAAKqG,EAAWa,EAAOP,EAAWrI,KAEzC8E,GAAQmE,GAAWlH,EAAQ/B,MAG7B,MAAM6H,EAAS,IAAIxD,WAAWS,GACxBoE,EAAMV,EAAWX,EAAQ,EAAGa,GAElC,OADAF,EAAWX,EAAQqB,EAAKH,GACjBlB,GCxCT,MAAMsB,EAAa,CAACnB,EAAKoB,EAAKC,KAC5B,IAAInB,EAAYF,GAAQqB,EAAU,EAClC,IAAK,IAAI1H,EAAI,UAAWA,EAAGA,KAAO,EAC5BuG,EAAYvG,IACduG,GAAakB,GAAOzH,IAAO0H,EAAU,IAGzC,OAAOnB,GAGHoB,EAAW,CAACC,EAAMC,EAAIC,EAAIC,EAAIC,EAAIlI,KACtC,IAAK,IAAIyD,EAAIuE,EAAIvE,EAAIyE,IAAMzE,EACzB,IAAK,IAAID,EAAIuE,EAAIvE,EAAIyE,IAAMzE,EACzBsE,EAAKnE,IAAIH,EAAGC,EAAGzD,IAKfmI,EAAgB,CAACL,EAAMtE,EAAGC,KAC9BoE,EAASC,EAAMtE,EAAI,EAAGC,EAAI,EAAGD,EAAI,EAAGC,EAAI,EAAG,GAC3CoE,EAASC,EAAMtE,EAAI,EAAGC,EAAI,EAAGD,EAAI,EAAGC,EAAI,EAAG,GAC3CoE,EAASC,EAAMtE,EAAI,EAAGC,EAAI,EAAGD,EAAI,EAAGC,EAAI,EAAG,IAGvC2E,EAAgB,CAACN,EAAMtE,EAAGC,KAC9BoE,EAASC,EAAMtE,EAAI,EAAGC,EAAI,EAAGD,EAAI,EAAGC,EAAI,EAAG,GAC3CoE,EAASC,EAAMtE,EAAI,EAAGC,EAAI,EAAGD,EAAI,EAAGC,EAAI,EAAG,GAC3CqE,EAAKnE,IAAIH,EAAGC,EAAG,IAyDJ4E,EAAWP,IACtB,MAAM9F,EAAI8F,EAAKzE,KACT+C,EAAS,GACf,IAAK,IAAIkC,EAAKtG,EAAI,EAAGyB,EAAIzB,EAAGuG,GAAQ,EAAGD,GAAM,EAAGA,GAAM,EAAG,CAKvD,IAJW,IAAPA,IAEFA,EAAK,GAEE7E,GAAK8E,GAAc,IAAP9E,GAAYA,IAAMzB,GAChC8F,EAAKpE,OAAO4E,EAAK,EAAG7E,IACvB2C,EAAOnG,KAAK,CAACqI,EAAK,EAAG7E,IAElBqE,EAAKpE,OAAO4E,EAAI7E,IACnB2C,EAAOnG,KAAK,CAACqI,EAAI7E,IAGrB8E,IAAS,EAEX,OAAOnC,GAGIoC,EAAW,CAAChE,EAAQiE,EAAMjK,KACrCiK,EAAK5I,SAAQ,CAAAuD,EAASsF,KAAT,IAAElF,EAAGC,GAALL,EAAA,OACXoB,EAAOb,IAAIH,EAAGC,EAAIjF,EAAKkK,GAAO,KAAa,EAANA,GAAY,IAAM,OAI9CC,EAAY,CAACnE,EAAQZ,EAAMgF,EAAQC,KAC9C,MAAM7G,EAAIwC,EAAOnB,KACjB,IAAK,IAAII,EAAI,EAAGA,EAAIzB,IAAKyB,EACvB,IAAK,IAAID,EAAI,EAAGA,EAAIxB,IAAKwB,EACnBI,EAAKJ,EAAGC,KAAOe,EAAOd,OAAOF,EAAGC,IAClCe,EAAOX,IAAIL,EAAGC,GAIpB,MAAMqF,EAAQD,GAAQ,EAAKD,EAC3B,IAAIG,EACF,OAAsBD,GAAQ,GAAMpB,EAAWoB,EAAM,KAAe,KACtE,IAAK,IAAI5I,EAAI,EAAGA,KAAM,EAAG6I,IAAY,EACnCvE,EAAOb,IAAI,GAAIzD,EAAI,EAAI,EAAI,GAAKA,EAAa,EAAV6I,GACnCvE,EAAOb,IAAI3B,EAAI,EAAI9B,EAAG,EAAa,EAAV6I,GAE3B,IAAK,IAAI7I,EAAI,EAAGA,KAAM,EAAG6I,IAAY,EACnCvE,EAAOb,IAAIzD,EAAI,EAAI,EAAIA,EAAG,EAAa,EAAV6I,GAC7BvE,EAAOb,IAAI,EAAG3B,EAAI9B,EAAI,EAAa,EAAV6I,ICjIvBC,EAAK,CAAClB,EAAMmB,EAAQC,KACxB,IAAK,IAAIhJ,EAAI,EAAGA,EAAI4H,EAAKzE,OAAQnD,EAAG,CAClC,IAAIiJ,EAASF,EACTG,EAASH,EACb,IAAK,IAAI5C,EAAI,EAAGA,EAAIyB,EAAKzE,OAAQgD,EAC/B8C,EAASD,EAAGC,EAAQrB,EAAKvE,IAAI8C,EAAGnG,IAChCkJ,EAASF,EAAGE,EAAQtB,EAAKvE,IAAIrD,EAAGmG,MAgEtC,IAAgByB,EAAAA,GA3DWA,CAAAA,IACzB,IAAIuB,EAAQ,EAYZ,OAXAL,EAAGlB,EAAM,CAAC,IAAI,CAAiBlG,EAAAA,KAAQ,IAAvB0H,EAAQzC,GAAezD,EACrC,OAAIxB,IAAQiF,EACH,CAAC,EAAGjF,IAEE,IAAX0H,EACFD,GAAS,EACAC,EAAS,KAChBD,EAEG,CAACC,EAAS,EAAGzC,OAEfwC,GA+CPE,CAAWzB,GACQ,EA7CMA,CAAAA,IACzB,IAAIuB,EAAQ,EACZ,IAAK,IAAI7F,EAAI,EAAGA,EAAIsE,EAAKzE,OAAQG,EAAG,CAClC,IAAIgG,EAAQ1B,EAAKvE,IAAIC,EAAI,EAAG,GACxBiG,EAAQ3B,EAAKvE,IAAIC,EAAG,KAAOgG,EAC/B,IAAK,IAAI/F,EAAI,EAAGA,EAAIqE,EAAKzE,OAAQI,EAAG,CAClC,MAAMiG,EAAO5B,EAAKvE,IAAIC,EAAI,EAAGC,GACvBkG,EAAO7B,EAAKvE,IAAIC,EAAGC,KAAOiG,EAChCL,GAASI,GAASE,GAAQH,IAAUE,EACpCF,EAAQE,EACRD,EAAQE,GAGZ,OAAON,GAgCPO,CAAW9B,GACW,GA9BMA,CAAAA,IAC5B,IAAIuB,EAAQ,EAWZ,OAPAL,EAAGlB,EAAM,GAAG,CAAC+B,EAAOjI,KAClB,MAAMkF,GAAS+C,IAAU,EAJX,UACA,SAGuCjI,EAAM,GAAK,IAIhE,OANc,KAGVkF,KACAuC,EAEGvC,KAEFuC,GAkBPS,CAAchC,GAfeA,CAAAA,IAC7B,IAAIiC,EAAU,EACd,IAAK,IAAItG,EAAI,EAAGA,EAAIqE,EAAKzE,OAAQI,EAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIsE,EAAKzE,OAAQG,EAC/BuG,GAAWjC,EAAKvE,IAAIC,EAAGC,GAG3B,OACuE,GAArEvB,KAAK4D,MAAM,GAAK5D,KAAK8H,IAAID,GAAWjC,EAAKzE,KAAOyE,EAAKzE,MAAQ,MAQ/D4G,CAAenC,GC9DjB,MAAMoC,EAAY,GACZC,EAAWvK,IACf,IAAIwK,EAASF,EAAUtK,GACvB,IAAKwK,EAAQ,CACX,MAAMjL,EAAI,IAAIgE,EAAS,CAAEE,KAAgB,EAAVzD,EAAc,KFcxB,EAACkI,EAAMlI,KAC9B,MAAMyD,EAAiB,EAAVzD,EAAc,GAC3BuI,EAAcL,EAAM,EAAG,GACvBK,EAAcL,EAAMzE,EAAO,EAAG,GAC9B8E,EAAcL,EAAM,EAAGzE,EAAO,GAC9BwE,EAASC,EAAM,EAAG,EAAG,EAAG,EAAG,GAC3BD,EAASC,EAAM,EAAG,EAAG,EAAG,EAAG,GAC3BD,EAASC,EAAMzE,EAAO,EAAG,EAAGA,EAAM,EAAG,GACrCwE,EAASC,EAAMzE,EAAO,EAAG,EAAGA,EAAO,EAAG,EAAG,GACzCwE,EAASC,EAAM,EAAGzE,EAAO,EAAG,EAAGA,EAAM,GACrCwE,EAASC,EAAM,EAAGzE,EAAO,EAAG,EAAGA,EAAO,EAAG,GACzCyE,EAAKnE,IAAI,EAAGN,EAAO,EAAG,GACtB,IAAK,IAAInD,EAAI,EAAGA,EAAImD,EAAO,IAAKnD,EAC9B4H,EAAKnE,IAAIzD,EAAG,IAAS,EAAJA,IACjB4H,EAAKnE,IAAI,EAAGzD,IAAS,EAAJA,IAEnB,GAAIN,GAAW,EAAG,CAChB,MAAMyK,EAAgBnI,KAAK4D,MAAMlG,EAAU,GAAK,EAI1C0K,EAAoE,EAApDpI,KAAKC,MAAMkB,EAAO,IAAMgH,EAAgB,EAAI,KAC5DE,EAAY,CAAC,GACnB,IAAK,IAAIrK,EAAImK,EAAenK,KAAM,GAChCqK,EAAUtK,KAAKoD,EAAO,EAAInD,EAAIoK,GAEhC,IAAK,IAAIpK,EAAI,EAAGA,GAAKmK,IAAiBnK,EACpC,IAAK,IAAImG,EAAI,EAAGA,GAAKgE,IAAiBhE,GAEhCnG,IAAMmG,IACNnG,GAAKmG,IAAMgE,GACZnK,IAAMmK,IAAkBhE,GAI3B+B,EAAcN,EAAMyC,EAAUrK,GAAIqK,EAAUlE,IAIlD,GAAIzG,GAAW,EACb,IACE,IAAI4K,EAAO5K,GAAW,GAAM8H,EAAW9H,EAAS,KAAiB,IAC/DyG,EAAI,EACNA,EAAI,IACFA,EAEF,IAAK,IAAInG,EAAI,GAAIA,KAAM,EAAGsK,KAAS,EACjC1C,EAAKnE,IAAI0C,EAAGhD,EAAOnD,EAAS,EAANsK,GACtB1C,EAAKnE,IAAIN,EAAOnD,EAAGmG,EAAS,EAANmE,IE7D1BC,CAAUtL,EAAGS,GACbsK,EAAUtK,GAAWwK,EAAS,CAACjL,EAAGkJ,EAAQlJ,IAE5C,MAAO,CAAC,IAAIgE,EAASiH,EAAO,IAAKA,EAAO,2CAG3B,SACbM,GAQG,IAPHC,mBACEA,EAAqBC,EAAgBhM,IADvCiM,mBAEEA,EAAqBD,EAAgB3L,IAFvC6L,WAGEA,EAAa,EAHfC,WAIEA,EAAa,GAJfnH,KAKEA,EAAO,6DACL,GAEJ,GAAIiH,EAAqBF,EACvB,MAAM,IAAIvI,MAAM,kCAElB,GAAI2I,EAAaD,EACf,MAAM,IAAI1I,MAAM,yBAEM,iBAAbsI,IACTA,EAAWpJ,EAAMC,KAAKmJ,IAGxB,IAAIM,EAAiB,EACrB,IAAK,IAAIpL,EAAUkL,EAAYlL,GAAWmL,IAAcnL,EAAS,CAC/D,GACEqL,EAAeN,GAAoB1M,EAAE2B,EAAU,GAAGvB,QAAU2M,EAE5D,SAGF,MAAMxM,EAAO,IAAIgE,EAAS,MAC1BkI,EAASlM,EAAMoB,GACfoL,EAAiBxM,EAAKqE,KAEtB,IAAK,IAAIqI,EAAKL,EAAoBK,GAAMP,IAAsBO,EAAI,CAChE,MAAMC,EAAaF,EAAeC,GAC5BE,EAAsBD,EAAWlN,EAAE2B,EAAU,GACnD,GAAIwL,EAAoB/M,QAAU2M,EAChC,SAIF,IAFAxM,EAAKyB,KAAK,EAAQ,GAClBzB,EAAKqE,KAAQrE,EAAKqE,KAAO,GAAK,EACvBrE,EAAKqE,KAAOuI,EAAoB/M,SACrCG,EAAKyB,KAAK,MAAqB,IAEjC,MAAO6H,EAAMW,GAAQ0B,EAAQvK,GAE7B,OADA4I,EAASV,EAAMW,EAAMrB,EAAY5I,EAAK8B,MAAO8K,IAChC,OAATxH,GACF+E,EAAUb,EAAMjC,EAAMjC,GAAOA,EAAMuH,EAAW1M,IACvCqJ,GAIFjC,EACJnH,KAAI,CAAC8C,EAAGoH,KACP,MAAMlF,EAAS,IAAIP,EAAS2E,GAG5B,OAFAa,EAAUjF,EAAQlC,EAAGoH,EAAQuC,EAAW1M,IACxCiF,EAAO1B,EAAIqJ,EAAU3H,GACdA,KAER1C,QAAO,CAACC,EAAMyC,IAAYA,EAAO1B,EAAIf,EAAKe,EAAI0B,EAASzC,KAG9D,MAAM,IAAImB,MAAM"}