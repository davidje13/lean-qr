{"version":3,"sources":["webpack://lean-qr/webpack/universalModuleDefinition","webpack://lean-qr/webpack/bootstrap","webpack://lean-qr/./src/qr/options/corrections.mjs","webpack://lean-qr/./src/qr/options/modes.mjs","webpack://lean-qr/./src/structures/Bitmap1D.mjs","webpack://lean-qr/./src/structures/Bitmap2D.mjs","webpack://lean-qr/./src/qr/options/masks.mjs","webpack://lean-qr/./src/qr/galoisPolynomial.mjs","webpack://lean-qr/./src/qr/errorCorrection.mjs","webpack://lean-qr/./src/qr/draw.mjs","webpack://lean-qr/./src/qr/score.mjs","webpack://lean-qr/./src/qr/generate.mjs"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","calculate","v","g2n","g1n","g1s","capBits","groups","ecsize","data","id","map","names","min","L","M","Q","H","max","alnum","indexOf","multi","encodings","version","forEach","enc","numeric","push","length","Number","substr","alphaNumeric","bytes","b","eci","iso88591","codePointAt","utf8","TextEncoder","encode","pickBest","opts","reduce","best","part","e","reg","est","auto","modes","Set","allowUTF8","delete","cur","filter","test","substring","Math","ceil","Error","parts","unshift","iso8859_1","Bitmap1D","constructor","capacityBytes","this","Uint8Array","bits","getCol","Array","isArray","Uint32Array","buffer","Bitmap2D","size","x","y","masked","set","mask","inv","toString","on","off","lf","padX","padY","tbPad","repeat","lrPad","toImageData","context","target","createImageData","abgr","cOn","cOff","fill","toCanvas","canvas","options","width","height","ctx","getContext","putImageData","floor","LOG","ln","mult256PolyLn","p1Ln","p2Ln","result","j","rem256Poly","num","denLn","remainder","shift","slice","generators","last","next","interleave","offset","blocks","lim","block","versionBytes","eccs","nBlocks","pos","remBinPoly","den","denBits","drawRect","code","x1","y1","x2","y2","drawPlacement","drawAlignment","getPath","xB","dirY","drawCode","path","bit","applyMask","maskId","ecId","info","pattern","hv","state0","fn","stateX","stateY","score","consec","scoreLines","lastV","lastM","curV","curM","countBoxes","state","countPatterns","totalOn","abs","scoreImbalance","baseCache","getBase","cached","numAlignmentM","stepAlignment","positions","dat","drawFrame","modeData","minCorrectionLevel","correctionNames","maxCorrectionLevel","minVersion","maxVersion","dataLengthBits","correctionData","cl","correction","versionedCorrection","calculateEC","masks","scoreCode"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,UAAW,GAAIH,GACI,iBAAZC,QACdA,QAAQ,WAAaD,IAErBD,EAAK,WAAaC,IARpB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,+LC3ErD,MA6KMC,EAAaC,IACjB,MAAMC,EAAMD,GAAK,GACXE,EAAOF,GAAK,GAAM,GAClBG,EAAOH,GAAK,EAAK,IACvB,MAAO,CACLI,QAAyC,GAA/BF,EAAMC,EAAMF,GAAOE,EAAM,IACnCE,OAAQJ,EAAM,CAAC,CAACC,EAAKC,GAAM,CAACF,EAAKE,EAAM,IAAM,CAAC,CAACD,EAAKC,IACpDG,OAAY,GAAJN,IAICO,EAAO,CAClB,CAAEC,GAAI,EAAMR,EAzLC,CACE,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACb,OACa,MACb,OACa,MACb,OACA,OACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,QACD,QACC,QACD,QACC,OACY,MACZ,OACA,QACA,QACD,QACC,QACD,QACC,QACA,SAiJoBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EA/IC,CACE,KACA,KACA,KACA,KACA,KACA,MACA,MACb,OACA,OACA,OACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,QACD,QACA,QACa,MACA,MACb,QACA,QACA,QACC,QACA,OACD,QACC,QACD,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACC,QACD,SAuGqBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EArGC,CACE,KACA,KACA,KACA,KACb,OACa,MACb,QACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,OACD,QACC,OACA,QACA,QACA,QACD,QACA,QACA,QACA,QACC,QACD,QACA,QACA,QACA,QACC,OACD,QACA,QACC,QACD,QACA,QACA,QACA,QACA,QACA,SA6DqBS,IAAIV,IAC1B,CAAES,GAAI,EAAMR,EA3DC,CACE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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lean-qr\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lean-qr\"] = factory();\n\telse\n\t\troot[\"lean-qr\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// TODO: identify algorithm for these values\n// Thanks, https://www.thonky.com/qr-code-tutorial/error-correction-table\n\n// this bit packing is compiled down to single ints, saving a lot of space\n// format: [group 2 count] | [group 1 count] | [group 1 size] | [ecsize]\n\n/* eslint-disable */\nconst DATA_L = [\n               ( 1 << 12) | ( 19 << 5) |  7,\n               ( 1 << 12) | ( 34 << 5) | 10,\n               ( 1 << 12) | ( 55 << 5) | 15,\n               ( 1 << 12) | ( 80 << 5) | 20,\n               ( 1 << 12) | (108 << 5) | 26,\n               ( 2 << 12) | ( 68 << 5) | 18,\n               ( 2 << 12) | ( 78 << 5) | 20,\n               ( 2 << 12) | ( 97 << 5) | 24,\n               ( 2 << 12) | (116 << 5) | 30,\n  ( 2 << 18) | ( 2 << 12) | ( 68 << 5) | 18,\n               ( 4 << 12) | ( 81 << 5) | 20,\n  ( 2 << 18) | ( 2 << 12) | ( 92 << 5) | 24,\n               ( 4 << 12) | (107 << 5) | 26,\n  ( 1 << 18) | ( 3 << 12) | (115 << 5) | 30,\n  ( 1 << 18) | ( 5 << 12) | ( 87 << 5) | 22,\n  ( 1 << 18) | ( 5 << 12) | ( 98 << 5) | 24,\n  ( 5 << 18) | ( 1 << 12) | (107 << 5) | 28,\n  ( 1 << 18) | ( 5 << 12) | (120 << 5) | 30,\n  ( 4 << 18) | ( 3 << 12) | (113 << 5) | 28,\n  ( 5 << 18) | ( 3 << 12) | (107 << 5) | 28,\n  ( 4 << 18) | ( 4 << 12) | (116 << 5) | 28,\n  ( 7 << 18) | ( 2 << 12) | (111 << 5) | 28,\n  ( 5 << 18) | ( 4 << 12) | (121 << 5) | 30,\n  ( 4 << 18) | ( 6 << 12) | (117 << 5) | 30,\n  ( 4 << 18) | ( 8 << 12) | (106 << 5) | 26,\n  ( 2 << 18) | (10 << 12) | (114 << 5) | 28,\n  ( 4 << 18) | ( 8 << 12) | (122 << 5) | 30,\n  (10 << 18) | ( 3 << 12) | (117 << 5) | 30,\n  ( 7 << 18) | ( 7 << 12) | (116 << 5) | 30,\n  (10 << 18) | ( 5 << 12) | (115 << 5) | 30,\n  ( 3 << 18) | (13 << 12) | (115 << 5) | 30,\n               (17 << 12) | (115 << 5) | 30,\n  ( 1 << 18) | (17 << 12) | (115 << 5) | 30,\n  ( 6 << 18) | (13 << 12) | (115 << 5) | 30,\n  ( 7 << 18) | (12 << 12) | (121 << 5) | 30,\n  (14 << 18) | ( 6 << 12) | (121 << 5) | 30,\n  ( 4 << 18) | (17 << 12) | (122 << 5) | 30,\n  (18 << 18) | ( 4 << 12) | (122 << 5) | 30,\n  ( 4 << 18) | (20 << 12) | (117 << 5) | 30,\n  ( 6 << 18) | (19 << 12) | (118 << 5) | 30,\n];\n\nconst DATA_M = [\n               ( 1 << 12) | ( 16 << 5) | 10,\n               ( 1 << 12) | ( 28 << 5) | 16,\n               ( 1 << 12) | ( 44 << 5) | 26,\n               ( 2 << 12) | ( 32 << 5) | 18,\n               ( 2 << 12) | ( 43 << 5) | 24,\n               ( 4 << 12) | ( 27 << 5) | 16,\n               ( 4 << 12) | ( 31 << 5) | 18,\n  ( 2 << 18) | ( 2 << 12) | ( 38 << 5) | 22,\n  ( 2 << 18) | ( 3 << 12) | ( 36 << 5) | 22,\n  ( 1 << 18) | ( 4 << 12) | ( 43 << 5) | 26,\n  ( 4 << 18) | ( 1 << 12) | ( 50 << 5) | 30,\n  ( 2 << 18) | ( 6 << 12) | ( 36 << 5) | 22,\n  ( 1 << 18) | ( 8 << 12) | ( 37 << 5) | 22,\n  ( 5 << 18) | ( 4 << 12) | ( 40 << 5) | 24,\n  ( 5 << 18) | ( 5 << 12) | ( 41 << 5) | 24,\n  ( 3 << 18) | ( 7 << 12) | ( 45 << 5) | 28,\n  ( 1 << 18) | (10 << 12) | ( 46 << 5) | 28,\n  ( 4 << 18) | ( 9 << 12) | ( 43 << 5) | 26,\n  (11 << 18) | ( 3 << 12) | ( 44 << 5) | 26,\n  (13 << 18) | ( 3 << 12) | ( 41 << 5) | 26,\n               (17 << 12) | ( 42 << 5) | 26,\n               (17 << 12) | ( 46 << 5) | 28,\n  (14 << 18) | ( 4 << 12) | ( 47 << 5) | 28,\n  (14 << 18) | ( 6 << 12) | ( 45 << 5) | 28,\n  (13 << 18) | ( 8 << 12) | ( 47 << 5) | 28,\n  ( 4 << 18) | (19 << 12) | ( 46 << 5) | 28,\n  ( 3 << 18) | (22 << 12) | ( 45 << 5) | 28,\n  (23 << 18) | ( 3 << 12) | ( 45 << 5) | 28,\n  ( 7 << 18) | (21 << 12) | ( 45 << 5) | 28,\n  (10 << 18) | (19 << 12) | ( 47 << 5) | 28,\n  (29 << 18) | ( 2 << 12) | ( 46 << 5) | 28,\n  (23 << 18) | (10 << 12) | ( 46 << 5) | 28,\n  (21 << 18) | (14 << 12) | ( 46 << 5) | 28,\n  (23 << 18) | (14 << 12) | ( 46 << 5) | 28,\n  (26 << 18) | (12 << 12) | ( 47 << 5) | 28,\n  (34 << 18) | ( 6 << 12) | ( 47 << 5) | 28,\n  (14 << 18) | (29 << 12) | ( 46 << 5) | 28,\n  (32 << 18) | (13 << 12) | ( 46 << 5) | 28,\n  ( 7 << 18) | (40 << 12) | ( 47 << 5) | 28,\n  (31 << 18) | (18 << 12) | ( 47 << 5) | 28,\n];\n\nconst DATA_Q = [\n               ( 1 << 12) | ( 13 << 5) | 13,\n               ( 1 << 12) | ( 22 << 5) | 22,\n               ( 2 << 12) | ( 17 << 5) | 18,\n               ( 2 << 12) | ( 24 << 5) | 26,\n  ( 2 << 18) | ( 2 << 12) | ( 15 << 5) | 18,\n               ( 4 << 12) | ( 19 << 5) | 24,\n  ( 4 << 18) | ( 2 << 12) | ( 14 << 5) | 18,\n  ( 2 << 18) | ( 4 << 12) | ( 18 << 5) | 22,\n  ( 4 << 18) | ( 4 << 12) | ( 16 << 5) | 20,\n  ( 2 << 18) | ( 6 << 12) | ( 19 << 5) | 24,\n  ( 4 << 18) | ( 4 << 12) | ( 22 << 5) | 28,\n  ( 6 << 18) | ( 4 << 12) | ( 20 << 5) | 26,\n  ( 4 << 18) | ( 8 << 12) | ( 20 << 5) | 24,\n  ( 5 << 18) | (11 << 12) | ( 16 << 5) | 20,\n  ( 7 << 18) | ( 5 << 12) | ( 24 << 5) | 30,\n  ( 2 << 18) | (15 << 12) | ( 19 << 5) | 24,\n  (15 << 18) | ( 1 << 12) | ( 22 << 5) | 28,\n  ( 1 << 18) | (17 << 12) | ( 22 << 5) | 28,\n  ( 4 << 18) | (17 << 12) | ( 21 << 5) | 26,\n  ( 5 << 18) | (15 << 12) | ( 24 << 5) | 30,\n  ( 6 << 18) | (17 << 12) | ( 22 << 5) | 28,\n  (16 << 18) | ( 7 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (11 << 12) | ( 24 << 5) | 30,\n  (16 << 18) | (11 << 12) | ( 24 << 5) | 30,\n  (22 << 18) | ( 7 << 12) | ( 24 << 5) | 30,\n  ( 6 << 18) | (28 << 12) | ( 22 << 5) | 28,\n  (26 << 18) | ( 8 << 12) | ( 23 << 5) | 30,\n  (31 << 18) | ( 4 << 12) | ( 24 << 5) | 30,\n  (37 << 18) | ( 1 << 12) | ( 23 << 5) | 30,\n  (25 << 18) | (15 << 12) | ( 24 << 5) | 30,\n  ( 1 << 18) | (42 << 12) | ( 24 << 5) | 30,\n  (35 << 18) | (10 << 12) | ( 24 << 5) | 30,\n  (19 << 18) | (29 << 12) | ( 24 << 5) | 30,\n  ( 7 << 18) | (44 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (39 << 12) | ( 24 << 5) | 30,\n  (10 << 18) | (46 << 12) | ( 24 << 5) | 30,\n  (10 << 18) | (49 << 12) | ( 24 << 5) | 30,\n  (14 << 18) | (48 << 12) | ( 24 << 5) | 30,\n  (22 << 18) | (43 << 12) | ( 24 << 5) | 30,\n  (34 << 18) | (34 << 12) | ( 24 << 5) | 30,\n];\n\nconst DATA_H = [\n               ( 1 << 12) | (  9 << 5) | 17,\n               ( 1 << 12) | ( 16 << 5) | 28,\n               ( 2 << 12) | ( 13 << 5) | 22,\n               ( 4 << 12) | (  9 << 5) | 16,\n  ( 2 << 18) | ( 2 << 12) | ( 11 << 5) | 22,\n               ( 4 << 12) | ( 15 << 5) | 28,\n  ( 1 << 18) | ( 4 << 12) | ( 13 << 5) | 26,\n  ( 2 << 18) | ( 4 << 12) | ( 14 << 5) | 26,\n  ( 4 << 18) | ( 4 << 12) | ( 12 << 5) | 24,\n  ( 2 << 18) | ( 6 << 12) | ( 15 << 5) | 28,\n  ( 8 << 18) | ( 3 << 12) | ( 12 << 5) | 24,\n  ( 4 << 18) | ( 7 << 12) | ( 14 << 5) | 28,\n  ( 4 << 18) | (12 << 12) | ( 11 << 5) | 22,\n  ( 5 << 18) | (11 << 12) | ( 12 << 5) | 24,\n  ( 7 << 18) | (11 << 12) | ( 12 << 5) | 24,\n  (13 << 18) | ( 3 << 12) | ( 15 << 5) | 30,\n  (17 << 18) | ( 2 << 12) | ( 14 << 5) | 28,\n  (19 << 18) | ( 2 << 12) | ( 14 << 5) | 28,\n  (16 << 18) | ( 9 << 12) | ( 13 << 5) | 26,\n  (10 << 18) | (15 << 12) | ( 15 << 5) | 28,\n  ( 6 << 18) | (19 << 12) | ( 16 << 5) | 30,\n               (34 << 12) | ( 13 << 5) | 24,\n  (14 << 18) | (16 << 12) | ( 15 << 5) | 30,\n  ( 2 << 18) | (30 << 12) | ( 16 << 5) | 30,\n  (13 << 18) | (22 << 12) | ( 15 << 5) | 30,\n  ( 4 << 18) | (33 << 12) | ( 16 << 5) | 30,\n  (28 << 18) | (12 << 12) | ( 15 << 5) | 30,\n  (31 << 18) | (11 << 12) | ( 15 << 5) | 30,\n  (26 << 18) | (19 << 12) | ( 15 << 5) | 30,\n  (25 << 18) | (23 << 12) | ( 15 << 5) | 30,\n  (28 << 18) | (23 << 12) | ( 15 << 5) | 30,\n  (35 << 18) | (19 << 12) | ( 15 << 5) | 30,\n  (46 << 18) | (11 << 12) | ( 15 << 5) | 30,\n  ( 1 << 18) | (59 << 12) | ( 16 << 5) | 30,\n  (41 << 18) | (22 << 12) | ( 15 << 5) | 30,\n  (64 << 18) | ( 2 << 12) | ( 15 << 5) | 30,\n  (46 << 18) | (24 << 12) | ( 15 << 5) | 30,\n  (32 << 18) | (42 << 12) | ( 15 << 5) | 30,\n  (67 << 18) | (10 << 12) | ( 15 << 5) | 30,\n  (61 << 18) | (20 << 12) | ( 15 << 5) | 30,\n];\n/* eslint-enable */\n\nconst calculate = (v) => {\n  const g2n = v >> 18;\n  const g1n = (v >> 12) & 0b111111;\n  const g1s = (v >> 5) & 0b1111111;\n  return {\n    capBits: (g1n * g1s + g2n * (g1s + 1)) * 8,\n    groups: g2n ? [[g1n, g1s], [g2n, g1s + 1]] : [[g1n, g1s]],\n    ecsize: v & 0b11111,\n  };\n};\n\nexport const data = [\n  { id: 0b01, v: DATA_L.map(calculate) },\n  { id: 0b00, v: DATA_M.map(calculate) },\n  { id: 0b11, v: DATA_Q.map(calculate) },\n  { id: 0b10, v: DATA_H.map(calculate) },\n];\n\nexport const names = {\n  min: 0,\n  L: 0,\n  M: 1,\n  Q: 2,\n  H: 3,\n  max: 3,\n};\n","const alnum = (c) => '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.indexOf(c);\n\nconst multi = (...encodings) => (data, version) => encodings.forEach((enc) => enc(data, version));\n\nconst numeric = (value) => (data, version) => {\n  data.push(0b0001, 4);\n  data.push(value.length, version < 10 ? 10 : version < 27 ? 12 : 14);\n  let i = 0;\n  for (; i < value.length - 2; i += 3) {\n    data.push(Number(value.substr(i, 3)), 10);\n  }\n  if (i < value.length - 1) {\n    data.push(Number(value.substr(i, 2)), 7);\n  } else if (i < value.length) {\n    data.push(Number(value.substr(i, 1)), 4);\n  }\n};\n\nconst alphaNumeric = (value) => (data, version) => {\n  data.push(0b0010, 4);\n  data.push(value.length, version < 10 ? 9 : version < 27 ? 11 : 13);\n  let i = 0;\n  for (; i < value.length - 1; i += 2) {\n    data.push(alnum(value[i]) * 45 + alnum(value[i + 1]), 11);\n  }\n  if (i < value.length) {\n    data.push(alnum(value[i]), 6);\n  }\n};\n\nconst bytes = (value) => (data, version) => {\n  data.push(0b0100, 4);\n  data.push(value.length, version < 10 ? 8 : 16);\n  value.forEach((b) => data.push(b, 8));\n};\n\nconst eci = (id) => (data) => {\n  data.push(0b0111, 4);\n  data.push(id, 8);\n};\n\n// Unicode codepoints and ISO-8859-1 overlap for first 256 chars\nconst iso88591 = (value) => bytes([...value].map((c) => c.codePointAt(0)));\n\nconst utf8 = (value) => multi(eci(26), bytes(new TextEncoder().encode(value)));\n\nconst pickBest = (opts) => opts.reduce((best, part) => ((part.e < best.e) ? part : best));\n\nnumeric.reg = /[0-9]/;\nnumeric.est = (value, version) => (\n  4 + (version < 10 ? 10 : version < 27 ? 12 : 14) +\n  (value.length * 10) / 3\n);\n\nalphaNumeric.reg = /[0-9A-Z $%*+./:-]/;\nalphaNumeric.est = (value, version) => (\n  4 + (version < 10 ? 9 : version < 27 ? 11 : 13) +\n  value.length * 5.5\n);\n\niso88591.reg = /[\\u0000-\\u00FF]/;\niso88591.est = (value, version) => (\n  4 + (version < 10 ? 8 : 16) +\n  value.length * 8\n);\n\nexport default {\n  auto: (value, {\n    modes = [numeric, alphaNumeric, iso88591, utf8],\n  } = {}) => {\n    // UTF8 is special; we cannot mix it with iso88591 since it sets a global flag.\n    // detect it, remove it as an option, and only use it if there is no other way.\n    const m = new Set(modes);\n    const allowUTF8 = m.delete(utf8);\n    if (allowUTF8) {\n      /* eslint-disable-next-line no-param-reassign */\n      modes = [...m];\n    }\n\n    return (data, version) => {\n      /*\n       * The algorithm used here assumes that no mode can encode longer strings in less space.\n       * It progresses character by character through the input string, tracking the single\n       * lowest-cost-so-far path for each of the currently possible modes. It is possible\n       * to determine this from the previous character's lowest-cost-so-far paths, making this\n       * algorithm O(n * m^2) overall (n = characters in input, m = number of available modes),\n       * assuming the mode estimator functions are O(1)\n       */\n\n      let cur = [{ c: 0, e: 0 }];\n      for (let i = 0; i < value.length; ++i) {\n        cur = modes.filter((c) => c.reg.test(value[i])).map((c) => pickBest(cur.map((p) => {\n          const part = { c, p: (p.c === c) ? p.p : p, s: (p.c === c) ? p.s : i };\n          part.v = value.substring(part.s, i + 1);\n          part.e = part.p.e + Math.ceil(c.est(part.v, version));\n          return part;\n        })));\n        if (!cur.length) {\n          if (allowUTF8) {\n            utf8(value)(data, version);\n            return;\n          }\n          throw new Error('Unencodable');\n        }\n      }\n      const parts = [];\n      for (let part = pickBest(cur); part.c; part = part.p) {\n        parts.unshift(part.c(part.v));\n      }\n      parts.forEach((enc) => enc(data, version));\n    };\n  },\n  multi,\n  eci,\n  numeric,\n  alphaNumeric,\n  bytes,\n  iso8859_1: iso88591,\n  utf8,\n};\n","export default class Bitmap1D {\n  constructor(capacityBytes) {\n    this.bytes = new Uint8Array(capacityBytes);\n    this.bits = 0;\n  }\n\n  push(value, bits) {\n    for (let b = bits, r = 8 - (this.bits & 7); b > 0; b -= r, r = 8) {\n      this.bytes[this.bits >>> 3] |= ((value << r) >>> b);\n      this.bits += Math.min(b, r);\n    }\n  }\n}\n","function getCol(v) {\n  if (!Array.isArray(v)) {\n    // legacy: assume a little-endian colour (ABGR)\n    /* eslint-disable-next-line no-param-reassign */\n    v = [\n      v & 255,\n      (v >>> 8) & 255,\n      (v >>> 16) & 255,\n      (v >>> 24),\n    ];\n  }\n  const b = new Uint8Array([...v, 255]);\n  return new Uint32Array(b.buffer, 0, 1)[0];\n}\n\nexport default class Bitmap2D {\n  constructor({ size, d }) {\n    this.size = size;\n    this.d = new Uint8Array(d || (size * size));\n  }\n\n  get(x, y) {\n    return !!(this.d[y * this.size + x] & 0b01);\n  }\n\n  masked(x, y) {\n    return (this.d[y * this.size + x] & 0b10);\n  }\n\n  set(x, y, value, mask = 1) {\n    this.d[y * this.size + x] = (mask * 0b10) | (!!value);\n  }\n\n  inv(x, y) {\n    this.d[y * this.size + x] ^= 1;\n  }\n\n  toString({\n    on = '##',\n    off = '  ',\n    lf = '\\n',\n    padX = 4,\n    padY = 4,\n  } = {}) {\n    const tbPad = (off.repeat(this.size + padX * 2) + lf).repeat(padY);\n    const lrPad = off.repeat(padX);\n    let r = tbPad;\n    for (let y = 0; y < this.size; ++y) {\n      r += lrPad;\n      for (let x = 0; x < this.size; ++x) {\n        r += this.get(x, y) ? on : off;\n      }\n      r += lrPad + lf;\n    }\n    return r + tbPad;\n  }\n\n  toImageData(context, {\n    on = 0xFF000000,\n    off = 0x00000000,\n  } = {}) {\n    const target = context.createImageData(this.size, this.size);\n    const abgr = new Uint32Array(target.data.buffer);\n    const cOn = getCol(on);\n    const cOff = getCol(off);\n    abgr.fill(cOff);\n    for (let p = 0; p < this.size * this.size; ++p) {\n      abgr[p] = (this.d[p] & 0b01) ? cOn : cOff;\n    }\n    return target;\n  }\n\n  toCanvas(canvas, {\n    padX = 4,\n    padY = 4,\n    ...options\n  } = {}) {\n    /* eslint-disable no-param-reassign */\n    canvas.width = this.size + padX * 2;\n    canvas.height = this.size + padY * 2;\n    /* eslint-enable no-param-reassign */\n    const ctx = canvas.getContext('2d');\n    const data = this.toImageData(ctx, options);\n    ctx.putImageData(data, padX, padY);\n  }\n}\n","export default [\n  (x, y) => !((x ^ y) & 1),\n  (x, y) => !(y & 1),\n  (x) => !(x % 3),\n  (x, y) => !((x + y) % 3),\n  (x, y) => !((Math.floor(x / 3) ^ Math.floor(y / 2)) & 1),\n  (x, y) => !((x & y & 1) + ((x * y) % 3)),\n  (x, y) => !(((x & y & 1) + ((x * y) % 3)) & 1),\n  (x, y) => !((((x ^ y) & 1) + ((x * y) % 3)) & 1),\n];\n","const LOG = new Uint8Array(512);\nLOG[0] = 1;\nfor (let i = 0, v = 1; i < 255; LOG[++i] = v) {\n  LOG[v + 256] = i;\n  v *= 2;\n  if (v & 256) {\n    v ^= 285;\n  }\n}\nconst e = (x) => LOG[x % 255]; // assume x is never negative\nconst ln = (x) => LOG[x + 256];\n\nexport const mult256PolyLn = (p1Ln, p2Ln) => {\n  const result = new Uint8Array(p1Ln.length + p2Ln.length - 1);\n  for (let i = 0; i < p1Ln.length; ++i) {\n    for (let j = 0; j < p2Ln.length; ++j) {\n      result[i + j] ^= e(p1Ln[i] + p2Ln[j]);\n    }\n  }\n  return result.map(ln);\n};\n\nexport const rem256Poly = (num, denLn) => {\n  const remainder = new Uint8Array(num.length + denLn.length - 1);\n  remainder.set(num, 0);\n  for (let i = 0; i < num.length; ++i) {\n    if (remainder[i]) {\n      // assume denLn[0] === 0 (true for all generator polys)\n      const shift = ln(remainder[i]); // - denLn[0];\n      for (let j = 0; j < denLn.length; ++j) {\n        remainder[i + j] ^= e(denLn[j] + shift);\n      }\n    }\n  }\n  return remainder.slice(num.length);\n};\n","import { mult256PolyLn, rem256Poly } from './galoisPolynomial.mjs';\n\nconst generators = [[0], [0, 0]];\nfor (let i = 1, last = generators[1]; i < 30; ++i) {\n  const next = mult256PolyLn(last, [0, i]);\n  generators.push(next);\n  last = next;\n}\n\nconst interleave = (target, offset, blocks) => {\n  /* eslint-disable no-param-reassign */\n  let p = offset;\n  const lim = Math.max(...blocks.map((block) => block.length));\n  for (let i = 0; i < lim; ++i) {\n    blocks.forEach((block) => {\n      if (i < block.length) {\n        target[p++] = block[i];\n      }\n    });\n  }\n  /* eslint-enable no-param-reassign */\n  return p;\n};\n\nexport default (versionBytes, { groups, ecsize }) => {\n  const blocks = [];\n  const eccs = [];\n\n  let p = 0;\n  let size = 0;\n  groups.forEach(([nBlocks, bytes]) => {\n    for (let b = 0; b < nBlocks; ++b, p += bytes) {\n      const block = versionBytes.slice(p, p + bytes);\n      blocks.push(block);\n      eccs.push(rem256Poly(block, generators[ecsize]));\n    }\n    size += nBlocks * (bytes + ecsize);\n  });\n\n  const result = new Uint8Array(size);\n  const pos = interleave(result, 0, blocks);\n  interleave(result, pos, eccs);\n  return result;\n};\n","const remBinPoly = (num, den, denBits) => {\n  let remainder = num << (denBits - 1);\n  for (let i = 0x8000000; i; i >>>= 1) {\n    if (remainder & i) {\n      remainder ^= den * (i >>> (denBits - 1));\n    }\n  }\n  return remainder;\n};\n\nconst drawRect = (code, x1, y1, x2, y2, value) => {\n  for (let y = y1; y < y2; ++y) {\n    for (let x = x1; x < x2; ++x) {\n      code.set(x, y, value);\n    }\n  }\n};\n\nconst drawPlacement = (code, x, y) => {\n  drawRect(code, x - 3, y - 3, x + 4, y + 4, 1);\n  drawRect(code, x - 2, y - 2, x + 3, y + 3, 0);\n  drawRect(code, x - 1, y - 1, x + 2, y + 2, 1);\n};\n\nconst drawAlignment = (code, x, y) => {\n  drawRect(code, x - 2, y - 2, x + 3, y + 3, 1);\n  drawRect(code, x - 1, y - 1, x + 2, y + 2, 0);\n  code.set(x, y, 1);\n};\n\nexport const drawFrame = (code, version) => {\n  const size = version * 4 + 17;\n  drawPlacement(code, 3, 3);\n  drawPlacement(code, size - 4, 3);\n  drawPlacement(code, 3, size - 4);\n  drawRect(code, 0, 7, 9, 9, 0);\n  drawRect(code, 7, 0, 9, 7, 0);\n  drawRect(code, size - 8, 7, size, 9, 0);\n  drawRect(code, size - 8, 0, size - 7, 7, 0);\n  drawRect(code, 7, size - 8, 9, size, 0);\n  drawRect(code, 0, size - 8, 7, size - 7, 0);\n  code.set(8, size - 8, 1);\n  for (let i = 8; i < size - 8; ++i) {\n    code.set(i, 6, !(i & 1));\n    code.set(6, i, !(i & 1));\n  }\n  if (version >= 2) {\n    const numAlignmentM = Math.floor(version / 7) + 1;\n    // alignment boxes must always be positioned on even pixels\n    // and are spaced evenly from the bottom right (except top and left which are always 6)\n    // the -0.25 avoids a quirk in the spec for version 32\n    const stepAlignment = Math.ceil((size - 13) / numAlignmentM / 2 - 0.25) * 2;\n    const positions = [6];\n    for (let i = numAlignmentM; (i--) > 0;) {\n      positions.push(size - 7 - i * stepAlignment);\n    }\n    for (let i = 0; i <= numAlignmentM; ++i) {\n      for (let j = 0; j <= numAlignmentM; ++j) {\n        if (\n          (!i && !j) ||\n          (!i && j === numAlignmentM) ||\n          (i === numAlignmentM && !j)\n        ) {\n          continue;\n        }\n        drawAlignment(code, positions[i], positions[j]);\n      }\n    }\n  }\n  if (version >= 7) {\n    for (let dat = (version << 12) | remBinPoly(version, 0b1111100100101, 13), j = 0; j < 6; ++j) {\n      for (let i = 12; (i--) > 9; dat >>>= 1) {\n        code.set(j, size - i, dat & 1);\n        code.set(size - i, j, dat & 1);\n      }\n    }\n  }\n};\n\nexport const getPath = (code) => {\n  const s = code.size;\n  const result = [];\n  for (let xB = s - 2, y = s, dirY = -1; xB >= 0; xB -= 2) {\n    if (xB === 5) { // special case: skip vertical timing pattern line\n      xB = 4;\n    }\n    /* eslint-disable no-cond-assign, no-sequences */\n    while (y += dirY, y !== -1 && y !== s) {\n      if (!code.masked(xB + 1, y)) {\n        result.push([xB + 1, y]);\n      }\n      if (!code.masked(xB, y)) {\n        result.push([xB, y]);\n      }\n    }\n    /* eslint-enable no-cond-assign, no-sequences */\n    dirY *= -1;\n  }\n  return result;\n};\n\nexport const drawCode = (target, path, data) => {\n  path.forEach(([x, y], bit) => target.set(x, y, (data[bit >> 3] << (bit & 7)) & 0x80, 0));\n};\n\nexport const applyMask = (target, mask, maskId, ecId) => {\n  const s = target.size;\n  for (let y = 0; y < s; ++y) {\n    for (let x = 0; x < s; ++x) {\n      if (mask(x, y) && !target.masked(x, y)) {\n        target.inv(x, y);\n      }\n    }\n  }\n  const info = ((ecId << 3) | maskId);\n  let pattern = 0b101010000010010 ^ ((info << 10) | remBinPoly(info, 0b10100110111, 11));\n  for (let i = 8; (i--) > 0; pattern >>= 1) {\n    target.set(8, (i > 1 ? 7 : 8) - i, pattern & 1);\n    target.set(s - 8 + i, 8, pattern & 1);\n  }\n  for (let i = 7; (i--) > 0; pattern >>= 1) {\n    target.set(i > 5 ? 7 : i, 8, pattern & 1);\n    target.set(8, s - i - 1, pattern & 1);\n  }\n};\n","const hv = (code, state0, fn) => {\n  for (let i = 0; i < code.size; ++i) {\n    let stateX = state0;\n    let stateY = state0;\n    for (let j = 0; j < code.size; ++j) {\n      stateX = fn(stateX, code.get(j, i));\n      stateY = fn(stateY, code.get(i, j));\n    }\n  }\n};\n\nexport const scoreLines = (code) => {\n  let score = 0;\n  hv(code, [0], ([consec, last], cur) => {\n    if (cur !== last) {\n      return [1, cur];\n    }\n    if (consec === 4) {\n      score += 3;\n    } else if (consec > 4) {\n      ++score;\n    }\n    return [consec + 1, last];\n  });\n  return score;\n};\n\nexport const countBoxes = (code) => {\n  let score = 0;\n  for (let x = 1; x < code.size; ++x) {\n    let lastV = code.get(x - 1, 0);\n    let lastM = code.get(x, 0) === lastV;\n    for (let y = 1; y < code.size; ++y) {\n      const curV = code.get(x - 1, y);\n      const curM = code.get(x, y) === curV;\n      score += (lastM && curM && lastV === curV);\n      lastV = curV;\n      lastM = curM;\n    }\n  }\n  return score;\n};\n\nexport const countPatterns = (code) => {\n  let score = 0;\n  /* eslint-disable no-multi-spaces */\n  const begin   = 0b10000000000_10000000000;\n  const pattern = 0b10111010000_00001011101;\n  const end     = 0b00000000001_00000000001;\n  /* eslint-enable no-multi-spaces */\n  hv(code, 0, (state, cur) => {\n    const next = ((state >>> 1) | begin) & (pattern ^ (cur ? 0 : -1));\n    if (next & end) {\n      ++score;\n    }\n    return next;\n  });\n  return score;\n};\n\nexport const scoreImbalance = (code) => {\n  let totalOn = 0;\n  for (let y = 0; y < code.size; ++y) {\n    for (let x = 0; x < code.size; ++x) {\n      totalOn += code.get(x, y);\n    }\n  }\n  return Math.floor(20 * Math.abs(totalOn / (code.size * code.size) - 0.5)) * 10;\n};\n\nexport default (code) => (\n  scoreLines(code) +\n  countBoxes(code) * 3 +\n  countPatterns(code) * 40 +\n  scoreImbalance(code)\n);\n","import Bitmap1D from '../structures/Bitmap1D.mjs';\nimport Bitmap2D from '../structures/Bitmap2D.mjs';\nimport modes from './options/modes.mjs';\nimport masks from './options/masks.mjs';\nimport { data as correctionData, names as correctionNames } from './options/corrections.mjs';\nimport calculateEC from './errorCorrection.mjs';\nimport {\n  drawFrame,\n  getPath,\n  drawCode,\n  applyMask,\n} from './draw.mjs';\nimport scoreCode from './score.mjs';\n\nconst baseCache = [];\nconst getBase = (version) => {\n  let cached = baseCache[version];\n  if (!cached) {\n    const c = new Bitmap2D({ size: version * 4 + 17 });\n    drawFrame(c, version);\n    baseCache[version] = cached = [c, getPath(c)];\n  }\n  return [new Bitmap2D(cached[0]), cached[1]];\n};\n\nexport default (modeData, {\n  minCorrectionLevel = correctionNames.min,\n  maxCorrectionLevel = correctionNames.max,\n  minVersion = 1,\n  maxVersion = 40,\n  mask = null,\n} = {}) => {\n  if (maxCorrectionLevel < minCorrectionLevel) {\n    throw new Error('Invalid correction level range');\n  }\n  if (maxVersion < minVersion) {\n    throw new Error('Invalid version range');\n  }\n  if (typeof modeData === 'string') {\n    /* eslint-disable-next-line no-param-reassign */\n    modeData = modes.auto(modeData);\n  }\n\n  let dataLengthBits = 0;\n  for (let version = minVersion; version <= maxVersion; ++version) {\n    if (correctionData[minCorrectionLevel].v[version - 1].capBits < dataLengthBits) {\n      continue;\n    }\n\n    const data = new Bitmap1D(2956); // max capacity of any code\n    modeData(data, version);\n    dataLengthBits = data.bits;\n\n    for (let cl = maxCorrectionLevel; cl >= minCorrectionLevel; --cl) {\n      const correction = correctionData[cl];\n      const versionedCorrection = correction.v[version - 1];\n      if (versionedCorrection.capBits < dataLengthBits) {\n        continue;\n      }\n      data.push(0b0000, 4);\n      data.bits = (data.bits + 7) & ~7; // pad with 0s to the next byte\n      while (data.bits < versionedCorrection.capBits) {\n        data.push(0b11101100_00010001, 16);\n      }\n      const [code, path] = getBase(version);\n      drawCode(code, path, calculateEC(data.bytes, versionedCorrection));\n      if (mask !== null) {\n        applyMask(code, masks[mask], mask, correction.id);\n        return code;\n      }\n\n      // pick best mask\n      return masks.map((m, maskId) => {\n        const masked = new Bitmap2D(code);\n        applyMask(masked, m, maskId, correction.id);\n        masked.s = scoreCode(masked);\n        return masked;\n      }).reduce((best, masked) => ((masked.s < best.s) ? masked : best));\n    }\n  }\n  throw new Error('Too much data');\n};\n"],"sourceRoot":""}