#!/usr/bin/env node
import{mode as e,correction as n,generate as o}from"../build/index.js";import{toSvgSource as t}from"../build/extras/svg.js";function r(e,n){switch(e.type){case"string":return n;case"enum":if(!e.values.includes(n))throw new Error(`Unknown value ${n} for ${e.name}; expected: ${e.values.join(", ")}`);return n;case"int":{const o=Math.round(Number(n));if(String(o)!==n)throw new Error(`Value for ${e.name} must be an integer`);if(void 0!==e.min&&o<e.min)throw new Error(`Value for ${e.name} must be >= ${e.min}`);if(void 0!==e.max&&o>e.max)throw new Error(`Value for ${e.name} must be <= ${e.max}`);return o}default:throw new Error(`Internal error parsing ${e.name}`)}}const i=new Map;i.set("auto",e.auto),i.set("numeric",e.numeric),i.set("alphanumeric",e.alphaNumeric),i.set("ascii",e.ascii),i.set("iso-8859-1",e.iso8859_1),i.set("shift-jis",e.shift_jis),i.set("utf8",e.utf8);const s=new Map;s.set("text-ansi-invert",{on:"\x1b[7m  \x1b[0m"}),s.set("text-ansi-bw",{on:"\x1b[40m  ",off:"\x1b[107m  ",lf:"\x1b[0m\n"}),s.set("text-ansi-wb",{on:"\x1b[107m  ",off:"\x1b[40m  ",lf:"\x1b[0m\n"}),s.set("text-box",{on:"\u2588\u2588"}),s.set("text-ascii",{});const a=[{id:"encoding",name:"encoding",short:"e",type:"enum",values:[...i.keys()],def:"auto",info:"Set the encoding type for the content"},{id:"minCor",name:"min-correction",short:"c",type:"enum",values:[...Object.keys(n)],def:"min",info:"Set the minimum error correction level"},{id:"maxCor",name:"max-correction",short:"C",type:"enum",values:[...Object.keys(n)],def:"max",info:"Set the maximum error correction level"},{id:"minVer",name:"min-version",short:"v",type:"int",min:1,max:40,def:1,info:"Set the minimum version (size)"},{id:"maxVer",name:"max-version",short:"V",type:"int",min:1,max:40,def:40,info:"Set the maximum version (size)"},{id:"padding",name:"padding",short:"p",type:"int",min:0,def:4,info:"Set the edge padding size"},{id:"mask",name:"mask",short:"m",type:"enum",values:["auto","0","1","2","3","4","5","6","7"],def:"auto",info:"Set the masking type (advanced usage)"},{id:"format",name:"format",short:"f",type:"enum",values:[...s.keys(),"svg"],def:"text-ansi-invert",info:"Set the output format"},{id:"info",name:"info",short:"i",type:"presence",info:"Print meta information to stderr"},{id:"help",name:"help",short:"?",type:"presence",info:"Print documentation"}];try{const e=function(e,n){let o=2;const t={};for(e.forEach((({id:e,def:n})=>{t[e]=n}));o<n.length;++o){const i=n[o];if("--"===i){++o;break}if(i.startsWith("--")){let s=i.indexOf("=");-1===s&&(s=i.length);const a=i.slice(2,s),m=e.find((({name:e})=>e===a));if(!m)throw new Error(`Unknown option ${a}`);"presence"===m.type?t[m.id]=!0:t[m.id]=r(m,s<i.length?i.slice(s):n[++o])}else{if(!i.startsWith("-"))break;for(let s=1;s<i.length;++s){const a=i[s],m=e.find((({short:e})=>e===a));if(!m)throw new Error(`Unknown shorthand option ${a}`);if("presence"!==m.type){if("="===i[s+1]){t[m.id]=r(m,i.slice(s+2));break}t[m.id]=r(m,s<i.length-1?i.slice(s+1):n[++o]);break}t[m.id]=!0}}}return t.rest=n.slice(o).join(" "),t}(a,process.argv);e.help&&(m="lean-qr",c="CLI for generating a QR code",f=a,p="content",process.stdout.write(`${c}\n\n`),process.stdout.write(`Usage: ${m} [flags] [--] ${p}\n\n`),f.forEach((e=>{switch(process.stdout.write(`--${e.name} / -${e.short}\n\n`),process.stdout.write(`  ${e.info}\n`),e.type){case"enum":process.stdout.write(`\n  One of: ${e.values.join(", ")}\n`);break;case"int":process.stdout.write("\n  Integer"),void 0!==e.min&&process.stdout.write(` >=${e.min}`),void 0!==e.max&&process.stdout.write(` <=${e.max}`),process.stdout.write("\n")}void 0!==e.def&&process.stdout.write(`  Default: ${e.def}\n`),process.stdout.write("\n\n")})),process.stdout.write("\n"),process.exit(0));const d=e.rest,u=i.get(e.encoding.toLowerCase());if(!u)throw new Error("Unknown encoding type");const h=u(d),l=Date.now(),w=o(h,{minCorrectionLevel:n[e.minCor],maxCorrectionLevel:n[e.maxCor],minVersion:e.minVer,maxVersion:e.maxVer,mask:"auto"===e.mask?null:Number(e.mask)}),v=Date.now();let $;if("svg"===e.format){const n=t(w,{on:"black",off:"white",padX:e.padding,padY:e.padding,xmlDeclaration:!0});$=Date.now(),process.stdout.write(n+"\n")}else{if(!s.has(e.format))throw new Error("Unknown output format");{const n=w.toString({...s.get(e.format),padX:e.padding,padY:e.padding});$=Date.now(),process.stdout.write(n)}}e.info&&(process.stderr.write("Time taken:\n"),process.stderr.write(`  generate: ${v-l}ms\n`),process.stderr.write(`  format: ${$-v}ms\n`))}catch(e){process.stderr.write(`${e.message}\n\n`),process.exit(1)}var m,c,f,p;
