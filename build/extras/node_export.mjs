import{deflateSync as e}from"node:zlib";const f=Buffer.from([137,80,78,71,13,10,26,10]),r=Buffer.from([]),t=(t,{on:o=[0,0,0],off:a=[0,0,0,0],padX:l=4,padY:s=4,scale:u=1}={})=>{const c=(t.size+2*l)*u,B=(t.size+2*s)*u,p=1+(c+7>>3),d=Buffer.alloc(B*p);for(let e=0;e<B;++e)for(let f=0;f<c;++f)t.get(Math.floor(f/u)-l,Math.floor(e/u)-s)&&(d[e*p+1+(f>>3)]|=128>>(7&f));const i=a[3]??255,b=o[3]??255,m=(i&b)<255,g=a[0]|a[1]|a[2]||(o[0]&o[1]&o[2])<255||m,h=Buffer.alloc(13);return h.writeUInt32BE(c,0),h.writeUInt32BE(B,4),h[8]=1,h[9]=g?3:0,Buffer.concat([f,n(1229472850,h),g?n(1347179589,[a[0],a[1],a[2],o[0],o[1],o[2]]):r,m?n(1951551059,[i,b]):r,n(1229209940,e(d,{level:9})),n(1229278788,[])])},o=(e,f)=>"data:image/png;base64,"+t(e,f).toString("base64"),n=(e,f)=>{const r=f.length,t=Buffer.alloc(12+r);t.writeUInt32BE(r,0),t.writeUInt32BE(e,4),t.set(f,8);let o=-1;for(const e of t.subarray(4,8+r))o=a[255&(o^e)]^o>>>8;return t.writeUInt32BE(~o>>>0,8+r),t},a=new Uint32Array(256);for(let e=0;e<256;++e){let f=e;for(let e=0;e<8;++e)f=3988292384*(1&f)^f>>>1;a[e]=f}export{t as toPngBuffer,o as toPngDataURL};
