const e=e=>{const r=new Error(`lean-qr error ${e}`);throw r.code=e,r},r=(e,r)=>r.map((r=>e[r])),n=["content","minCorrectionLevel","maxCorrectionLevel","minVersion","maxVersion","mask","trailer","modes"],t=[...n,"on","off","padX","padY"],o={"image-rendering":"pixelated"},s=e=>{try{return e()}catch(e){return void console.warn(e.message)}},a=({createElement:a,useEffect:l,useRef:c}=e(6),m=e(7),i={})=>e=>{const u={...i,...e},d=c(null),f=c([null,{}]);return l((()=>{d.current.hidden=!s((()=>(((e,r,n)=>n.some((n=>e[n]!==r[n])))(u,f.current[1],n)&&(f.current[0]=m(u.content,u)),f.current[0].toCanvas(d.current,u),1))),f.current[1]=u}),r(u,t)),a("canvas",{ref:d,style:o,className:u.className})},l=({createElement:a,useMemo:l}=e(6),c=e(7),m=e(8),i={})=>e=>{const u={...i,...e},d=l((()=>s((()=>c(u.content,u)))),r(u,n)),f=l((()=>d&&s((()=>m(d,u)))),[d,...r(u,t)]);return f?a("img",{src:f,style:o,className:u.className}):null};export{a as makeAsyncComponent,l as makeSyncComponent};
